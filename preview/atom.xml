<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Jakub Koz≈Çowski</title>
	<subtitle>A 1.00000000000001x engineering blog</subtitle>
	<link href="https://blog.kubukoz.com/preview/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kubukoz.com/preview"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-02-05T00:00:00+00:00</updated>
	<id>https://blog.kubukoz.com/preview/atom.xml</id>
	<entry xml:lang="en">
		<title>Asking better questions</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/asking-better-questions/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/asking-better-questions/</id>
		<content type="html">&lt;p&gt;From the very first day I started learning how to program, I had questions. &lt;strong&gt;So many questions!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thing is, after some time, as my career progressed, I ended up being on the receiving end of such questions more and more. That never changed - in fact, I&#x27;m used to people asking for help many times a day.&lt;&#x2F;p&gt;
&lt;p&gt;All of this is to say, I&#x27;ve asked and been asked probably thousands of questions - good ones, but also bad ones, and I would like to share a couple of tips on how to ask better questions.
These tips will not only help you &lt;strong&gt;reach a solution sooner&lt;&#x2F;strong&gt;, but possibly a &lt;strong&gt;better solution altogether&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;!-- todo: quick examples: instead of saying X say Y --&gt;
&lt;!-- todo: cheatsheet at the end? --&gt;
&lt;h1 id=&quot;what-s-a-question&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-a-question&quot; aria-label=&quot;Anchor link for: what-s-a-question&quot;&gt;What&#x27;s a question?&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Before we get to the tips, I want to highlight what kind of questions this could be useful for.&lt;&#x2F;p&gt;
&lt;p&gt;In the context of this post, &amp;quot;asking a question&amp;quot; means any action that you perform to get help &lt;strong&gt;from other people&lt;&#x2F;strong&gt; in solving a problem.&lt;&#x2F;p&gt;
&lt;p&gt;This includes, but is not limited to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;reporting an issue in a project (&amp;quot;the command X doesn&#x27;t work&amp;quot;, &amp;quot;can you add a Y function?&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;requesting assistance in your work (&amp;quot;my code crashes&amp;quot;, &amp;quot;I can&#x27;t publish to Maven Central&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;learning (&amp;quot;what does this function do?&amp;quot;, &amp;quot;what&#x27;s the best way to publish a Scala library?&amp;quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To sum up, the practices described here can be used in a variety of contexts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;due-dilligence&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#due-dilligence&quot; aria-label=&quot;Anchor link for: due-dilligence&quot;&gt;Due dilligence&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Before submitting the question or issue, ensure you&#x27;ve done &lt;strong&gt;as much as you reasonably could&lt;&#x2F;strong&gt; by yourself. Reasonably - because nobody would want you to spend a week searching for an answer they could give you in five minutes.&lt;&#x2F;p&gt;
&lt;p&gt;Many Open Source projects will have a checklist for this, and you can make your own if you like. Here are a couple of things to try:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-this-an-xy-problem&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-this-an-xy-problem&quot; aria-label=&quot;Anchor link for: is-this-an-xy-problem&quot;&gt;Is this an XY problem?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing you should check for is the possibility of asking a completely misguided question.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a common trap that you see a problem, come up with a solution, encounter a roadblock while trying to implement it... then get &lt;strong&gt;hung up on that solution&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Whereas it may be a genuinely legitimate way to get to your goal, it&#x27;s a good idea to take a step back and ponder:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this really the right way to approach this?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You may find &lt;strong&gt;that it&#x27;s not&lt;&#x2F;strong&gt; - that you&#x27;re jumping through hoops to make that solution match the problem, or trying to fit this problem into that solution.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re lucky, someone aware of this phenomenon will ask you: &lt;strong&gt;Is this an XY problem?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;xyproblem.info&#x2F;&quot;&gt;xyproblem.info&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The XY problem is asking about your attempted solution rather than your actual problem.
This leads to enormous amounts of &lt;strong&gt;wasted time and energy&lt;&#x2F;strong&gt;, both on the part of people asking for help, and on the part of those providing help.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once I learned about this, I started seeing myself and my peers fall into this trap &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Frequency_illusion&quot;&gt;unreasonably often&lt;&#x2F;a&gt;, and I agree with the statement above - it can be a massive waste of time.
Being aware of this pitfall is incredibly useful: we can fight against it.&lt;&#x2F;p&gt;
&lt;p&gt;Consider if you&#x27;re &lt;strong&gt;asking the right question&lt;&#x2F;strong&gt;. Give your audience a sneak peek of &amp;quot;the bigger picture&amp;quot; of what you&#x27;re trying to get done.
This will allow them to suggest a better way to do that, if there is one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;search-around&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#search-around&quot; aria-label=&quot;Anchor link for: search-around&quot;&gt;Search around&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In general, exploration in search of a solution can be very productive, and serve as a great learning experience too.
There are many places to look in, though, so here are a couple of ideas to get you started.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Search engines&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Use a search engine - it can be Google, Bing, DuckDuckGo, or whatever you use. Run some basic searches and sift through a couple of pages of the results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Knowledge bases&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Open-source_software&quot;&gt;OSS&lt;&#x2F;a&gt; projects, this could be GitHub Issues or Discussions - maybe the question you meant to post has already been asked.
Maybe the bug you encountered has already been reported and then closed as &amp;quot;not a bug&amp;quot;.
Who knows, maybe it&#x27;s been fixed and will be available in the next release!&lt;&#x2F;p&gt;
&lt;p&gt;At work, you can often find useful nuggets of information on Slack and your team&#x27;s Wiki.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you can find it, reach for the documentation. If you can&#x27;t - you can start by asking for instructions on where to get it.&lt;&#x2F;p&gt;
&lt;p&gt;Documentation could also be code or a product brief. You may be able to gather some information about why what you&#x27;re trying to do doesn&#x27;t work, and maybe even figure out &lt;strong&gt;a way to fix it&lt;&#x2F;strong&gt; - always useful information to bring in a bug report.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-your-software&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#update-your-software&quot; aria-label=&quot;Anchor link for: update-your-software&quot;&gt;Update your software&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Ensure that the problem is visible on &lt;strong&gt;the latest available version&lt;&#x2F;strong&gt; of the software you&#x27;re having problems with.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes we use older versions of software without being aware of a more recent release,
or there&#x27;s been a change in the project that &lt;strong&gt;hasn&#x27;t yet been released&lt;&#x2F;strong&gt; - we can only try it out after switching to a snapshot&#x2F;nightly distribution channel.
Doing that extra step to get these unreleased changes is usually not strictly necessary, but it may obviate the need for posting an issue, or at least for the maintainers to run that step for you.&lt;&#x2F;p&gt;
&lt;p&gt;Even if you&#x27;re stuck on an older version, it&#x27;s good to know whether the problem has already been solved.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maybe-it-s-you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maybe-it-s-you&quot; aria-label=&quot;Anchor link for: maybe-it-s-you&quot;&gt;Maybe it&#x27;s you&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes we are just wrong and don&#x27;t realize we&#x27;re the ones making a mistake, especially after a long session of debugging.
&lt;strong&gt;Stay humble&lt;&#x2F;strong&gt;, take a break, look at the problem with fresh eyes and see if you find any flaws in your approach.&lt;&#x2F;p&gt;
&lt;p&gt;Nevertheless, &lt;strong&gt;don&#x27;t get blocked&lt;&#x2F;strong&gt; - if you honestly see no way forward, asking for help is the right call.
If you&#x27;re not sure about something, just mention that in the question - you don&#x27;t have to know everything.
You can even start by asking an easier, more general question, just to validate your understanding - these questions tend to get answered quicker.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;context&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#context&quot; aria-label=&quot;Anchor link for: context&quot;&gt;Context&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;If you&#x27;ve done your research and still feel like you need help, now&#x27;s the time to start writing: gather all the useful information about your problem, and try to materialize that in your question.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-much-is-too-much&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-much-is-too-much&quot; aria-label=&quot;Anchor link for: how-much-is-too-much&quot;&gt;How much is too much?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Some questions certainly require more insight into the problem, while some can be answered just based on a single sentence. I generally practice the following approach:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Minimal, yet sufficient.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s deliberately vague - I&#x27;m afraid you&#x27;ll have to figure out how much detail to provide on a case-by-case basis, but usually you&#x27;ll need to post &lt;strong&gt;more information for more complex issues&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What I &lt;em&gt;can&lt;&#x2F;em&gt; give you, though, is a blueprint.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;storyline&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storyline&quot; aria-label=&quot;Anchor link for: storyline&quot;&gt;Storyline&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Your question should tell a story. You&#x27;re the main character, and the issue you&#x27;re facing is the villain.&lt;&#x2F;p&gt;
&lt;p&gt;Focusing on your story&#x27;s most important plot points will make it &lt;strong&gt;easier to follow&lt;&#x2F;strong&gt;, and help make sure you don&#x27;t miss any crucial details.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prologue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#prologue&quot; aria-label=&quot;Anchor link for: prologue&quot;&gt;Prologue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Provide some background to explain where the main character is coming from, and what their motivation is.
State the problem you&#x27;re trying to solve, what you&#x27;re trying to achieve - &lt;strong&gt;focus on the end goal&lt;&#x2F;strong&gt;, not the implementation details (also see &lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;asking-better-questions&#x2F;#is-this-an-xy-problem&quot;&gt;the XY problem&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot;&gt;Setup&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Then, there&#x27;s the setup of the story: &lt;strong&gt;how did you run into this problem?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Focus on the steps that took you there, without judgement: just state the facts of what you did that triggered the issue. How does the hero bump into the bad guy?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plot-twist&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#plot-twist&quot; aria-label=&quot;Anchor link for: plot-twist&quot;&gt;Plot twist&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You were expecting everything would go according to the plan, but &lt;strong&gt;something else happened&lt;&#x2F;strong&gt;. What does your ideal scenario look like, and what&#x27;s the reality?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-investigation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-investigation&quot; aria-label=&quot;Anchor link for: the-investigation&quot;&gt;The investigation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ve already tried to overcome the problem - share your past attempts, and explain &lt;strong&gt;why you think they weren&#x27;t successful&lt;&#x2F;strong&gt;. It can be helpful to rule out distractions and dead ends.&lt;&#x2F;p&gt;
&lt;p&gt;Is there a pattern in what the issue looks like? Does it happen every time you retrace your steps, or was there something peculiar about that one attempt? (see also: &lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;asking-better-questions&#x2F;#reproducible&quot;&gt;reproducible example&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Do you have any other information that could be relevant?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-cliffhanger&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-cliffhanger&quot; aria-label=&quot;Anchor link for: the-cliffhanger&quot;&gt;The cliffhanger&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;After all, we&#x27;re hoping to get a sequel - a response that explains it all, and a culmination of our characters&#x27; arcs.
Before you submit your story for print, you can tease the reader a bit, by telling them what will happen if the villain isn&#x27;t stopped:&lt;&#x2F;p&gt;
&lt;p&gt;Is this issue critical for you? Does it block you? &lt;strong&gt;Do you have a workaround&lt;&#x2F;strong&gt; that you can apply in the meantime?
Any alternatives that you can use - while the issue is being figured out - will be helpful to others who find themselves in an identical situation.&lt;&#x2F;p&gt;
&lt;p&gt;Keep in mind, though - if you&#x27;re going to mention that the issue is critical to you and your team, that doesn&#x27;t give you any more right to a reply than anyone else. &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;asking-better-questions&#x2F;#be-kind&quot;&gt;Don&#x27;t act entitled&lt;&#x2F;a&gt;!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example&quot; aria-label=&quot;Anchor link for: example&quot;&gt;Example&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;An important part of every code-related question is an example. If you&#x27;re asking a question in the style of &amp;quot;this doesn&#x27;t work&amp;quot; or &amp;quot;I want to do X&amp;quot;, &lt;strong&gt;a good example is worth a thousand words&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Not just &lt;em&gt;any&lt;&#x2F;em&gt; example, though - it should be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;complete (also called self-contained or standalone).&lt;&#x2F;li&gt;
&lt;li&gt;minimal&lt;&#x2F;li&gt;
&lt;li&gt;reproducible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s look at these traits in more detail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;complete&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#complete&quot; aria-label=&quot;Anchor link for: complete&quot;&gt;Complete&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A good example specifies everything that&#x27;s necessary to replicate the issue on another person&#x27;s computer. This includes version numbers of relevant components, imports, compiler flags, your OS type... and &lt;strong&gt;the exact steps to follow&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally, your example will be self-contained enough that to reproduce the issue, the person reading the report should be able to &lt;strong&gt;run a single command&lt;&#x2F;strong&gt; and see the same result as you did.
For example, a &lt;code&gt;nix run&lt;&#x2F;code&gt; call with a pinned &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;flakes-first-steps&quot;&gt;Nix Flake reference&lt;&#x2F;a&gt; is as complete as it gets. In the Scala ecosystem, recently it&#x27;s been best practice to post &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;docs&#x2F;cookbooks&#x2F;gists&#x2F;&quot;&gt;a scala-cli Gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In case of open source projects, it can be very useful to write your reproduction in the style of a test case. Perhaps something that looks like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I do X, I see Y, but expect to see Z&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you want, you can actually submit a draft Pull Request with &lt;strong&gt;a failing test&lt;&#x2F;strong&gt; that does that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;minimal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#minimal&quot; aria-label=&quot;Anchor link for: minimal&quot;&gt;Minimal&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Remove all unnecessary clutter from any examples you post.&lt;&#x2F;p&gt;
&lt;p&gt;This includes any unused imports or variables, library dependencies, local files, other pieces of your project, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, if any of these is vital to reproducing the issue, you can leave them in, but make sure they can be used by anyone anytime. Anything else becomes a hindrance, so &lt;strong&gt;stick to the essentials&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reproducible&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reproducible&quot; aria-label=&quot;Anchor link for: reproducible&quot;&gt;Reproducible&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This may already be covered by the &amp;quot;complete&amp;quot; part, but consider whether your example will behave the same way tomorrow, in a leap year, on a Windows machine, or on Mars.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, fine - it doesn&#x27;t &lt;em&gt;actually&lt;&#x2F;em&gt; have to run on Windows üíÄ but it&#x27;s imperative that the problem doesn&#x27;t only happen &amp;quot;sometimes&amp;quot;, or that you &lt;strong&gt;make it blatantly obvious&lt;&#x2F;strong&gt; that it does.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, don&#x27;t miss this crucial step:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;actually-run-the-reproduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#actually-run-the-reproduction&quot; aria-label=&quot;Anchor link for: actually-run-the-reproduction&quot;&gt;Actually run the reproduction&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While you&#x27;re minimizing an issue, it&#x27;s quite easy to accidentally remove a &lt;strong&gt;seemingly innocent, yet vital piece&lt;&#x2F;strong&gt; of the setup that actually plays a role in the issue - making the code work as designed, instead of showcasing a problem.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m sometimes guilty of skipping this step myself (embarrassingly often, really), but I&#x27;ve also seen a number of people make the same mistake - after all, these examples are so small, so simple... how can they be wrong?&lt;&#x2F;p&gt;
&lt;p&gt;Do yourself a favor, add this step to your checklist: when posting a reproduction, make sure you actually run it &lt;strong&gt;before you submit it&lt;&#x2F;strong&gt;. If you&#x27;re changing it after submission, &lt;strong&gt;run it again&lt;&#x2F;strong&gt;. Make sure the output matches what you reported.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;communication-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#communication-style&quot; aria-label=&quot;Anchor link for: communication-style&quot;&gt;Communication style&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Last but not least, we need to make sure someone actually reads our question and decides to help us. &lt;strong&gt;Proper communication is key!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-kind&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-kind&quot; aria-label=&quot;Anchor link for: be-kind&quot;&gt;Be kind&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This goes without saying: in a public forum, you&#x27;re just a stranger on the Internet asking people to spend their time (a scarce resource) on &lt;em&gt;your needs&lt;&#x2F;em&gt;.
It doesn&#x27;t mean you shouldn&#x27;t ask your question, of course - &lt;strong&gt;that&#x27;s what these places are for&lt;&#x2F;strong&gt;! Just be mindful of your tone and phrasing to make sure it doesn&#x27;t come off as demanding or entitled.&lt;&#x2F;p&gt;
&lt;p&gt;Respect the time and effort of people who offer to help you: even if it&#x27;s part of their job, you owe it to them not to abuse their good intentions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-clear&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-clear&quot; aria-label=&quot;Anchor link for: be-clear&quot;&gt;Be clear&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Read your question in whole before you submit it.&lt;&#x2F;p&gt;
&lt;p&gt;If you have the time, do some basic editing. There is no &lt;em&gt;single&lt;&#x2F;em&gt; right way to do it, and from this point you can go as far as you like (running a spellchecker, Grammarly, and so on), just like in any other form of writing.
See if you can remove unnecessary, &lt;del&gt;redundant&lt;&#x2F;del&gt; words, break up longer sentences &lt;del&gt;in your explanations&lt;&#x2F;del&gt; or split your paragraphs into sections.&lt;&#x2F;p&gt;
&lt;p&gt;However, &lt;strong&gt;don&#x27;t sweat it&lt;&#x2F;strong&gt; - &amp;quot;perfect&amp;quot; is the enemy of &amp;quot;done&amp;quot;, and the fact that you&#x27;re trying is already going to get appreciated!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-waste-time&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#don-t-waste-time&quot; aria-label=&quot;Anchor link for: don-t-waste-time&quot;&gt;Don&#x27;t waste time&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Regardless of whether it&#x27;s a public forum or a work Slack, it&#x27;s best to avoid wasting time. On that front, one of the worst offenders are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Round-trip_delay&quot;&gt;&lt;strong&gt;roundtrips&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Minimize the amount of roundtrips by making your question complete (see the parts about &lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;asking-better-questions&#x2F;#due-dilligence&quot;&gt;Due dilligence&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;asking-better-questions&#x2F;#context&quot;&gt;Context&lt;&#x2F;a&gt;) - this will avoid unnecessary follow-up questions, and save time for both sides of the exchange.&lt;&#x2F;p&gt;
&lt;p&gt;The most extreme example of a useless roundtrip is sending a message that &lt;strong&gt;just says &amp;quot;Hello&amp;quot;&lt;&#x2F;strong&gt;. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nohello.com&quot;&gt;Don&#x27;t do it&lt;&#x2F;a&gt; - the person reading that message will be forced to wait for the &amp;quot;actual&amp;quot; message you send, before they can even begin to try and help you. Even worse, they may see your message, start doing something else, then have to context switch again after you follow up with the question.&lt;&#x2F;p&gt;
&lt;p&gt;Another example: &amp;quot;Does anybody here know X?&amp;quot; - that&#x27;s not the question you &lt;em&gt;really&lt;&#x2F;em&gt; want to ask, is it? Add the actual question in a thread or start with it in the first place.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;use-your-judgement&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-your-judgement&quot; aria-label=&quot;Anchor link for: use-your-judgement&quot;&gt;Use your judgement&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn the rules like a pro, so you can break them like an artist.&lt;&#x2F;p&gt;
&lt;p&gt;-Pablo Picasso&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Remember, these are just hints and ideas - you don&#x27;t always have to follow all of them. In certain environments, you&#x27;ll find it best not to overwhelm people with information about your issue (e.g. if you&#x27;re asking for general advice on a Slack channel),
and sometimes you have to be more vague because of e.g. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Non-disclosure_agreement&quot;&gt;NDA&lt;&#x2F;a&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;In synchronous, private conversations with a coworker you know well, you probably don&#x27;t need to structure your messages as much as on a GitHub issue, and you can use less formal language as well.
You can also &lt;strong&gt;assume more&lt;&#x2F;strong&gt; about their knowledge of your problem and spare them the overview.&lt;&#x2F;p&gt;
&lt;p&gt;Keep these tips in mind, but ultimately you&#x27;ll have to follow your gut.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I hope these suggestions give you a baseline for the questions you&#x27;ll ask in your career.
There&#x27;s clearly more to it, and I&#x27;m not the first person to write about this problem either.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll find a lot of overlap with documents like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;&amp;quot;How To Ask Questions The Smart Way&amp;quot;&lt;&#x2F;a&gt; - which is a good one, although I consider its tone a bit alienating to recommend it as a first point of contact.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to share this post with your peers if you wish they gave you better questions, just... &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;0wsKxLyYU7E?t=145&quot;&gt;DBAA&lt;&#x2F;a&gt; üôÇ
I also recommend checking out the other sources listed below.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading, and let me know what you think about the post!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sources&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sources&quot; aria-label=&quot;Anchor link for: sources&quot;&gt;Sources&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.chris-kipp.io&#x2F;slides&#x2F;open-source&quot;&gt;What I‚Äôve learned in open source, and why I think you should contribute.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;How to Ask Questions The Smart Way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;sscce.org&#x2F;&quot;&gt;Short, Self Contained, Correct (Compilable), Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jonskeet.uk&#x2F;csharp&#x2F;complete.html&quot;&gt;Short but complete programs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nohello.com&quot;&gt;Don&#x27;t Just Say &amp;quot;Hello&amp;quot; In Chat&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;xyproblem.info&#x2F;&quot;&gt;The XY Problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Nix Flakes: first steps</title>
		<published>2022-10-22T00:00:00+00:00</published>
		<updated>2022-10-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/flakes-first-steps/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/flakes-first-steps/</id>
		<content type="html">&lt;p&gt;I keep getting questions about how to start with Nix. I believe the way to go in 2022 is to start with Flakes, so in this post I&#x27;ll describe just that.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to learn Nix from first principles instead, I recommend &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;&quot;&gt;Nix Pills&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nix.dev&#x2F;&quot;&gt;nix.dev&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;teaser-what-s-in-it-for-me&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#teaser-what-s-in-it-for-me&quot; aria-label=&quot;Anchor link for: teaser-what-s-in-it-for-me&quot;&gt;Teaser: what&#x27;s in it for me?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Imagine you wanted to try out a program someone recommended to you, but you didn&#x27;t want to install it before getting an impression.
Or maybe you want to ensure your team&#x27;s project is always built with the same version of your build tools, regardless of what versions your team members might have installed on their machines.
Maybe you already &lt;em&gt;have&lt;&#x2F;em&gt; a version of Node that&#x27;s too new for a project, and you&#x27;d like to downgrade in the scope of that project (while keeping the latest version installed).&lt;&#x2F;p&gt;
&lt;p&gt;Nix&#x27;s shells allow you to do all of these. A shell creates a temporary environment in which the selected programs are available.&lt;&#x2F;p&gt;
&lt;p&gt;For example, without writing any Nix files I can open a shell with the &lt;code&gt;scala-cli&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix shell nixpkgs#scala-cli&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; scala-cli version&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Scala&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; CLI version: 0.1.16&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Scala&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; version (default&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-colon z-shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 3.2.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now get this: that command didn&#x27;t actually &lt;em&gt;install&lt;&#x2F;em&gt; anything. When I leave the shell (with &lt;code&gt;exit&lt;&#x2F;code&gt; or &lt;code&gt;ctrl+d&lt;&#x2F;code&gt;), &lt;code&gt;scala-cli&lt;&#x2F;code&gt; is no longer usable, and it doesn&#x27;t pollute my user environment.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid repetition, share our shells with the team, and make them reproducible, we can define them in files. In that case, we would call &lt;code&gt;nix develop&lt;&#x2F;code&gt; inside the project&#x27;s directory to open the shell it provides:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ls &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; making sure we&amp;#39;re in a directory containing a flake&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;flake.lock&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;      flake.nix&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix develop &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; loads the environment&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;version&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;v16.17.1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; exit &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; restores the parent process&amp;#39;s environment&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;version &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; doesn&amp;#39;t work anymore&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;zsh:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; command not found: node&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Shells are just one usecase of Nix, but I find that they&#x27;re the one that brings the most value with minimal learning effort.
Read on, and you will learn:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how to make isolated, reproducible and shareable shells with Nix Flakes&lt;&#x2F;li&gt;
&lt;li&gt;where to find packages for those shells&lt;&#x2F;li&gt;
&lt;li&gt;some bits of Nix syntax and semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and more. Let&#x27;s get to it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-nix&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-nix&quot; aria-label=&quot;Anchor link for: what-is-nix&quot;&gt;What is Nix?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To get started with Flakes, it&#x27;d be nice if we knew what Nix was in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;Nix&lt;&#x2F;a&gt; is a purely functional package manager.
It has a unique combination of features that make it an interesting tool that can be used to solve a variety of problems - one of which is packaging a website (which is exactly how the page you&#x27;re reading was generated and packaged).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-flakes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-flakes&quot; aria-label=&quot;Anchor link for: what-are-flakes&quot;&gt;What are flakes?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Flakes are a feature of Nix meant to enable distribution of Nix packages in a decentralized and reproducible manner.
They provide a standardized and consistent approach to dependency management, caching and the general user experience.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;main purpose&lt;&#x2F;strong&gt; of a Flake is to provide &lt;em&gt;outputs&lt;&#x2F;em&gt;: things like package definitions and shells.&lt;&#x2F;p&gt;
&lt;p&gt;Flakes can also depend on each other to produce these outputs. Flake dependencies are generally called &lt;em&gt;inputs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to get a more in-depth understanding of Flakes, there&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;command-ref&#x2F;new-cli&#x2F;nix3-flake.html&quot;&gt;documentation for the flake CLI&lt;&#x2F;a&gt;, as well as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;a wiki entry&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;xeiaso.net&#x2F;blog&#x2F;nix-flakes-1-2022-02-21&quot;&gt;other&lt;&#x2F;a&gt; blog &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ghedam.at&#x2F;a-tour-of-nix-flakes&quot;&gt;posts&lt;&#x2F;a&gt; trying to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;serokell.io&#x2F;blog&#x2F;practical-nix-flakes&quot;&gt;introduce&lt;&#x2F;a&gt; you to flakes.&lt;&#x2F;p&gt;
&lt;p&gt;For now, let&#x27;s try to use the feature, and hopefully, we&#x27;ll get a better understanding of it along the way.&lt;&#x2F;p&gt;
&lt;!-- todo: what&#x27;s a shell? add a &quot;why&quot; and a demo --&gt;
&lt;h2 id=&quot;enabling-flakes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#enabling-flakes&quot; aria-label=&quot;Anchor link for: enabling-flakes&quot;&gt;Enabling flakes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Flakes are a (currently) experimental feature of Nix, and they&#x27;ve been present in the default distribution of Nix since release 2.4.
The &amp;quot;experimental&amp;quot; part sounds scary, but I&#x27;ve had a good and consistent experience for a year now, and it&#x27;s probably a matter of (less rather than more) time until they are considered stable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;First of all, you need Nix installed. For that, follow &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;download.html&quot;&gt;the official installation guide&lt;&#x2F;a&gt; for your system.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;The wiki&lt;&#x2F;a&gt; lists several ways to enable flakes. I prefer this one:&lt;&#x2F;p&gt;
&lt;p&gt;Create the file &lt;code&gt;~&#x2F;.config&#x2F;nix&#x2F;nix.conf&lt;&#x2F;code&gt; (if it doesn&#x27;t exist) and add this line to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; class=&quot;language-conf z-code&quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;z-source z-genconfig&quot;&gt;&lt;span class=&quot;z-meta z-param z-genconfig&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-genconfig&quot;&gt;experimental-features&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-genconfig&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; nix&lt;span class=&quot;z-keyword z-operator z-genconfig&quot;&gt;-&lt;&#x2F;span&gt;command flakes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-flakes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-flakes&quot; aria-label=&quot;Anchor link for: using-flakes&quot;&gt;Using flakes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The beauty of flakes is that you can build an arbitrary flake&#x27;s output without dealing with the Nix language.&lt;&#x2F;p&gt;
&lt;p&gt;Now that you have enabled Flakes, you can run this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix shell nixpkgs#cowsay&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cowsay boo&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;_____&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; boo &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-----&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;^__^&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
         &lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;oo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;______&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;                &lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;----w&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;
                &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If that works, you&#x27;ve enabled flakes correctly. It&#x27;s time to make our own flake.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-first-flake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#your-first-flake&quot; aria-label=&quot;Anchor link for: your-first-flake&quot;&gt;Your first flake&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest flake possible is one that produces no outputs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll talk about the syntax later.&lt;&#x2F;p&gt;
&lt;p&gt;Save this as &lt;code&gt;flake.nix&lt;&#x2F;code&gt; in a new directory and you&#x27;ll be able to run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix flake check&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command should succeed with no output. Now let&#x27;s make our flake a little more complicated...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rest-of-owl.jpg&quot; alt=&quot;Draw the rest of the owl&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-nix&quot;&gt;builtins&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;currentSystem&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-markup z-italic&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-begin z-nix&quot;&gt;${&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-end z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I know, that&#x27;s a lot, but I promise we&#x27;ll talk about it once we get it to work.&lt;&#x2F;p&gt;
&lt;p&gt;Save the file and run &lt;code&gt;nix flake check&lt;&#x2F;code&gt; again. It might take a little while, but ultimately you should see the following happen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;flake.lock&lt;&#x2F;code&gt; file is created&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The command fails spectacularly:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: attribute &amp;#39;currentSystem&amp;#39; missing

      at &#x2F;nix&#x2F;store&#x2F;ll6cvswyh6cm59rj3zzawlm8922fcfl0-source&#x2F;flake.nix:6:16:

            5|     let
            6|       system = builtins.currentSystem;
            |                ^
            7|       pkgs = import nixpkgs { inherit system; };
(use &amp;#39;--show-trace&amp;#39; to show detailed location information)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s a reason why it failed (don&#x27;t worry about it yet). You can get it to succeed if you add &lt;code&gt;--impure&lt;&#x2F;code&gt; to the command, but it&#x27;s a workaround - as you can guess, we&#x27;ll try to get rid of that soon.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix flake check&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;impure&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s talk about what we&#x27;ve done so far. Specifically, let&#x27;s talk about syntax!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nix-syntax-101&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nix-syntax-101&quot; aria-label=&quot;Anchor link for: nix-syntax-101&quot;&gt;Nix syntax 101&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the parts that the two languages share, Nix is actually quite similar to JSON (see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;language&#x2F;index.html&quot;&gt;manual for the Nix syntax&lt;&#x2F;a&gt;).
The following JSON object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; class=&quot;language-json z-code&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;z-source z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Jakub&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;power_level&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-json&quot;&gt;9001&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;languages&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-json&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Polish&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-json&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;English&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-json&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;uses_nix&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-constant z-language z-json&quot;&gt;true&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;translates to the following Nix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# by the way, this is a line comment.&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;name&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Jakub&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;power_level&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-nix&quot;&gt;9001&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;languages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Polish&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;English&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;uses_nix&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-nix&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should note the following key differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;entries in the object (Nix calls these &lt;em&gt;attribute sets&lt;&#x2F;em&gt;, or attrsets) are separated with &lt;strong&gt;semicolons&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the trailing semicolon is &lt;strong&gt;required&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;keys&#x2F;values are separated with the &lt;strong&gt;equals sign&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;keys aren&#x27;t wrapped in &lt;strong&gt;quotes&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;array elements are &lt;strong&gt;separated with whitespace&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;comments&lt;&#x2F;strong&gt; are allowed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nix-syntax-102-functions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nix-syntax-102-functions&quot; aria-label=&quot;Anchor link for: nix-syntax-102-functions&quot;&gt;Nix syntax 102: functions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to features known from formats like JSON, Nix has functions.
Functions in Nix are anonymous (they&#x27;re lambdas), and they always take &lt;strong&gt;one&lt;&#x2F;strong&gt; argument each (multi-parameter functions are emulated either by means of currying or passing an attrset).&lt;&#x2F;p&gt;
&lt;p&gt;This is the general syntax for a function literal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;input&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;body&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks familiar? We saw a similar one in the first flake we&#x27;ve made:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we&#x27;re seeing a new piece of syntax: the underscore. That just means we &lt;strong&gt;ignore&lt;&#x2F;strong&gt; the input and don&#x27;t give it a name.&lt;&#x2F;p&gt;
&lt;p&gt;Functions are applied to arguments when they&#x27;re separated by whitespace:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; try this in `nix repl`!&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;nix-repl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; inc = x : x + 1&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;nix-repl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; inc 1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To sum up all of the above, here&#x27;s our initial flake definition, annotated:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# This object right here defines a flake.&lt;&#x2F;span&gt;
&lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# You&amp;#39;ll see an object on the top level of every Nix flake in existence.&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# `outputs` is a special name in Nix&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# which lets the tools know about all the possible outputs of a flake.&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# It is a function that returns the outputs,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# and it receives the flake&amp;#39;s inputs as the argument.&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# We don&amp;#39;t produce any outputs, so we don&amp;#39;t need any inputs.&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# Thus, we ignore the argument.&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# Returning an empty object - no flake outputs yet.&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-flake-as-a-function&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-flake-as-a-function&quot; aria-label=&quot;Anchor link for: a-flake-as-a-function&quot;&gt;A flake as a function&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Just to repeat and rephrase: a flake&#x27;s &lt;code&gt;outputs&lt;&#x2F;code&gt; attribute is a function that takes the flake&#x27;s inputs as an argument.&lt;&#x2F;p&gt;
&lt;p&gt;In the second flake, we saw this function literal as the definition of &lt;code&gt;outputs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* more stuff below *&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is &lt;code&gt;nixpkgs&lt;&#x2F;code&gt;? What are the three dots? Let&#x27;s start with the dots.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;triple-dot-syntax&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#triple-dot-syntax&quot; aria-label=&quot;Anchor link for: triple-dot-syntax&quot;&gt;Triple-dot syntax&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In the above snippet, we have a function literal that looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;*...*&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you see an attrset in the input position of a function, it means you&#x27;re looking at a pattern match (or destructuring). &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; will be considered a required attribute, but because of the three dots any extra arguments will be ignored - normally, if you only list specific attributes like in&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;another-flake&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then calling the function with any extra attributes provided at the call site will cause an error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;nix-repl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; f = &lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt; nixpkgs&lt;span class=&quot;z-punctuation z-separator z-shell&quot;&gt;,&lt;&#x2F;span&gt; other-flake &lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; : &lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;nix-repl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; f &lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt; nixpkgs = 0; other-flake = 1; another-param = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;oops&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;; &lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;error:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; anonymous function at (string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;:1:2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; called with unexpected argument &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;another-param&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

       &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;at&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ¬´string¬ª:1:1:&lt;&#x2F;span&gt;

            &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt; nixpkgs = 0; other-flake = 1; another-param = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;oops&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;; &lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
             &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;^&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nixpkgs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nixpkgs&quot; aria-label=&quot;Anchor link for: nixpkgs&quot;&gt;Nixpkgs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&quot;&gt;Nixpkgs&lt;&#x2F;a&gt; is the main repository containing definitions of packages for Nix. At the time of writing, it&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;repology.org&#x2F;repositories&#x2F;graphs&quot;&gt;the largest package repository tracked by Repology&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; parameter is the result of fetching the &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; input. Remember, we defined our inputs as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# ...&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is syntactic sugar for the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# ...&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it&#x27;s Nix&#x27;s equivalent of saying:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;nixos&#x2F;nixpkgs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;nixos&#x2F;nixpkgs&lt;&#x2F;code&gt; GitHub repository will be tracked by Nix and within our flake aliased under the name &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; (the name we defined for the input). By convention you&#x27;ll usually see these names match the repository that the flake is coming from.&lt;&#x2F;p&gt;
&lt;p&gt;The first time an input is used in a flake command, Nix will &lt;em&gt;pin&lt;&#x2F;em&gt; it.
Pinning an input means that Nix will figure out the exact revision that it fetched, and it will make sure that everybody using this flake gets the exact same one.&lt;&#x2F;p&gt;
&lt;p&gt;At the time I&#x27;m writing this, pinning &lt;code&gt;github:nixos&#x2F;nixpkgs&lt;&#x2F;code&gt; creates the following &lt;code&gt;flake.lock&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; class=&quot;language-json z-code&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;z-source z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nodes&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;locked&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;lastModified&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-json&quot;&gt;1666564341&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;narHash&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sha256-WXv7Ry6F9B8OtM0K1ye1ncaPaW&#x2F;4Dwn8nDxFf2UPDWY=&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;owner&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixos&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;repo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rev&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;09217f05bf29922c7e108c3143f11e0135ae0ded&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;type&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;original&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;owner&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixos&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;repo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;type&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;root&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;inputs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-mapping z-begin z-json&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;root&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;root&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-pair z-json&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;version&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-mapping z-key-value z-json&quot;&gt;:&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-json&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-json&quot;&gt;7&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-mapping z-end z-json&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We don&#x27;t need to talk about all of it (the file&#x27;s main purpose is to be machine-readable), but please notice this part:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; class=&quot;language-json z-code&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;z-source z-json&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rev&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;: &lt;span class=&quot;z-string z-quoted z-double z-json&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;09217f05bf29922c7e108c3143f11e0135ae0ded&lt;span class=&quot;z-punctuation z-definition z-string z-end z-json&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;tree&#x2F;09217f05bf29922c7e108c3143f11e0135ae0ded&quot;&gt;the commit hash&lt;&#x2F;a&gt; of Nixpkgs&#x27;s &lt;code&gt;master&lt;&#x2F;code&gt; branch that was found when I referenced the flake.&lt;&#x2F;p&gt;
&lt;p&gt;The lockfile makes sure that the flake&#x27;s inputs are reproducible. In fact, if you copy-pasted &lt;code&gt;flake.nix&lt;&#x2F;code&gt; and &lt;code&gt;flake.lock&lt;&#x2F;code&gt; to another machine, Nix would guarantee that the same version of Nixpkgs would be used - kind of like saying &amp;quot;after you clone this Git repository, always check out this revision&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Until you explicitly ask Nix to update an input (with something like &lt;code&gt;nix flake update&lt;&#x2F;code&gt;), it will remain unchanged. When you change it, the lockfile will be updated as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flake-outputs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flake-outputs&quot; aria-label=&quot;Anchor link for: flake-outputs&quot;&gt;Flake outputs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look at the output we defined for our flake earlier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# `nixpkgs` is in scope - we&amp;#39;re in the body of the `outputs` function.&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-nix&quot;&gt;builtins&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;currentSystem&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-markup z-italic&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-begin z-nix&quot;&gt;${&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-end z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, you can see &lt;em&gt;let bindings&lt;&#x2F;em&gt; in play: it&#x27;s another feature of the Nix language.
A let binding declares a named value that can be used in the statements that follow.
In the snippet above, we define &lt;code&gt;system&lt;&#x2F;code&gt; and &lt;code&gt;pkgs&lt;&#x2F;code&gt; in a single binding so they can refer to each other.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s assume we&#x27;re running an ARM-based Mac machine. The &lt;code&gt;builtins.currentSystem&lt;&#x2F;code&gt; string would have a value of &lt;code&gt;&amp;quot;aarch64-darwin&amp;quot;&lt;&#x2F;code&gt;, and our flake would return a single output: &lt;code&gt;devShells.aarch64-darwin.default&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some other popular system values you might want to use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aarch64-linux&lt;&#x2F;code&gt;, for ARM-based Linux&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;x86_64-linux&lt;&#x2F;code&gt;, for Intel-based Linux&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;x86_64-darwin&lt;&#x2F;code&gt;, for Intel-based macOS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can use that output by entering the development shell it defines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix develop&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;impure &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; we still need this flag&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;bash-5.1$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cowsay boo&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;_____&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; boo &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
 &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-----&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;^__^&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
         &lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;oo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;______&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;                &lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;----w&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;
                &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-or z-shell&quot;&gt;||&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;bash-5.1$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re relying on a couple defaults here, but the &lt;code&gt;nix develop&lt;&#x2F;code&gt; command opened a Bash shell with the &lt;code&gt;cowsay&lt;&#x2F;code&gt; package already available on our &lt;code&gt;$PATH&lt;&#x2F;code&gt;. How did it happen?&lt;&#x2F;p&gt;
&lt;p&gt;First, we&#x27;re relying on a couple defaults: &lt;code&gt;nix develop&lt;&#x2F;code&gt; on its own is equivalent to &lt;code&gt;nix develop .&lt;&#x2F;code&gt;, meaning &amp;quot;the default shell for the flake in the working directory&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;On top of that, &lt;code&gt;nix develop .&lt;&#x2F;code&gt; means Nix will try to use the first output it finds when trying the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devShells.&amp;lt;currentSystem&amp;gt;.default&lt;&#x2F;code&gt;, or&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;packages.&amp;lt;currentSystem&amp;gt;.default&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For this article, we don&#x27;t care about the latter.&lt;&#x2F;p&gt;
&lt;p&gt;Reading the &amp;quot;current system&amp;quot; is considered an impurity in Nix, and as such it&#x27;s allowed in the command line, but not in pure evaluation mode (the default for Flakes): the expansion of the command happens in the CLI, whereas the evaluation of a flake happens in the Nix build system.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An &amp;quot;impurity&amp;quot; here means it&#x27;s not &amp;quot;purely functional&amp;quot;.
The purely functional paradigm only allows an expression to depend on the values of other expressions, and something like &amp;quot;the current system&amp;quot;, &amp;quot;the current time&amp;quot; or &amp;quot;the current text of the file at path &lt;code&gt;&#x2F;xyz&lt;&#x2F;code&gt;&amp;quot; would require reaching beyond the scope of our code and getting the value from the local system.&lt;&#x2F;p&gt;
&lt;p&gt;Nix relies on purity to deliver some of its guarantees, so it encourages pure definitions for the code you write for it.
In Flakes, &lt;code&gt;--impure&lt;&#x2F;code&gt; is an escape hatch that allows breaking some of these rules of purity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;shells-and-packages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shells-and-packages&quot; aria-label=&quot;Anchor link for: shells-and-packages&quot;&gt;Shells and packages&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Back to our output - it&#x27;s defined as the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;mkShell&lt;&#x2F;code&gt; is a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#sec-pkgs-mkShell&quot;&gt;function in Nixpkgs&lt;&#x2F;a&gt; that takes an attrset as an argument. One of the attributes in it is &lt;code&gt;packages&lt;&#x2F;code&gt;, which can be used to list... packages (who knew, right?) that will be available in the shell environment once it&#x27;s loaded.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pkgs.cowsay&lt;&#x2F;code&gt; is a reference to one of the packages in Nixpkgs - you can search for these packages in a variety of ways, one which is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.nixos.org&#x2F;packages&quot;&gt;search.nixos.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We could get more packages into our shell by listing them in the attribute:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;scala-cli&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;openjdk11&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As a matter of fact, these two packages showcase one of Nix&#x27;s greatest features - isolation.
scala-cli has a runtime dependency on a Java runtime, and it requires it to be version 17 or above. &amp;quot;But we&#x27;re also adding openjdk11, surely that&#x27;ll conflict, right?&amp;quot;
Well, no - scala-cli&#x27;s dependency is isolated: no other packages will see it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But wait! We didn&#x27;t talk about &lt;code&gt;pkgs&lt;&#x2F;code&gt;, did we? Also, we still have this impurity of &lt;code&gt;builtins.currentSystem&lt;&#x2F;code&gt; that we should deal with, so that we don&#x27;t need that &lt;code&gt;--impure&lt;&#x2F;code&gt; parameter in every call to the Nix CLI.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;systems-and-pkgs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#systems-and-pkgs&quot; aria-label=&quot;Anchor link for: systems-and-pkgs&quot;&gt;systems and pkgs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;pkgs&lt;&#x2F;code&gt; was defined by using the &lt;code&gt;import&lt;&#x2F;code&gt; function (part of Nix&#x27;s standard library):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-nix&quot;&gt;builtins&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;currentSystem&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A couple things to explain here: &lt;code&gt;import x&lt;&#x2F;code&gt; means:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;read the file at path &lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;parse it as a Nix expression&lt;&#x2F;li&gt;
&lt;li&gt;return that expression&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Additionally, we have a function call just after the import: you could&#x27;ve written the same thing as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, &lt;code&gt;inherit system&lt;&#x2F;code&gt; is syntactic sugar for &lt;code&gt;system = system&lt;&#x2F;code&gt;. We forward the value of &lt;code&gt;system&lt;&#x2F;code&gt; currently in scope or, in other words, we make the attrset &amp;quot;inherit&amp;quot; the &lt;code&gt;system&lt;&#x2F;code&gt; value from its definition&#x27;s scope.&lt;&#x2F;p&gt;
&lt;p&gt;Reminder: &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; is the input Nix fetched for our flake based on how we defined &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; in the &lt;code&gt;inputs&lt;&#x2F;code&gt; section on the top-level of the flake.&lt;&#x2F;p&gt;
&lt;p&gt;Flake inputs are fetched to paths on the file system, and the value of the input (the &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; value we got as a parameter of &lt;code&gt;outputs&lt;&#x2F;code&gt;) is that path. Given what we now know, we can tell that &lt;code&gt;pkgs&lt;&#x2F;code&gt; will be the result of calling some function defined in the Nix expression for Nixpkgs.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the thing: packages in Nix can have different needs and different ways of being built, depending on what system they&#x27;re being built for.
Most packages have dependencies on other, low-level packages (like the C compiler or another build tool), which are inherently platform-specific.
This is why you need to specify the system that Nixpkgs should use as a default when giving you access to packages.&lt;&#x2F;p&gt;
&lt;p&gt;So... we need a &lt;code&gt;system&lt;&#x2F;code&gt;. But &lt;code&gt;builtins.currentSystem&lt;&#x2F;code&gt; is impure, so how do we deal with that?&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Nix&#x27;s CLI already does the &lt;code&gt;currentSystem&lt;&#x2F;code&gt; check. We only really used it in the flake for convenience.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming you only need your flake to work on one platform, you might as well hardcode the system like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;aarch64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-number-sign z-nix&quot;&gt;# or whatever system you have&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it would work! Also, it would have no impurities. The day is saved... but is that it?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;supporting-multiple-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#supporting-multiple-systems&quot; aria-label=&quot;Anchor link for: supporting-multiple-systems&quot;&gt;Supporting multiple systems&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With the change from above, our flake looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;aarch64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-markup z-italic&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-begin z-nix&quot;&gt;${&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-embedded z-end z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can list all of its outputs using the &lt;code&gt;nix flake show&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix flake show&lt;&#x2F;span&gt;

&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;path:&#x2F;Users&#x2F;kubukoz&#x2F;projects&#x2F;flake-demos?lastModified&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;1666577116&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&amp;amp;narHash=sha256-uq5VoRshQbQxkE0BL5Mgmb1eNguUIdtGaus1H50Oz6Y=&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄdevShells&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄaarch64-darwin&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄdefault:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; development environment &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;nix-shell&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve eliminated the impurity from our flake, but at the cost of only supporting one system.
How can we add support for others?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s recap a couple facts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Flake outputs are system specific&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;builtins.currentSystem&lt;&#x2F;code&gt; is not allowed in pure evaluation mode&lt;&#x2F;li&gt;
&lt;li&gt;The Nix CLI (e.g. &lt;code&gt;nix develop&lt;&#x2F;code&gt;) knows what system it&#x27;s running on&lt;&#x2F;li&gt;
&lt;li&gt;we &lt;em&gt;need&lt;&#x2F;em&gt; a system to make a &lt;code&gt;pkgs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In theory, there&#x27;s nothing stopping us from copy-pasting a bunch of code to support more systems:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;aarch64-darwin&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;x86_64-darwin&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;aarch64-linux&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;x86_64-linux&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but in practice, it gets real tedious real quick. It&#x27;s boilerplate of the kind that we wouldn&#x27;t like to maintain!&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, Nix&#x27;s language and standard library offer ways to generate attrsets given a list of keys.
I won&#x27;t get into the gnarly details (this is the kind of thing you learn in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;&quot;&gt;Nix Pills&lt;&#x2F;a&gt;), but the solution I like most is a higher-order function that&#x27;ll take the following arguments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a list of system names&lt;&#x2F;li&gt;
&lt;li&gt;a closure (function) that receives a system name and produces outputs &lt;em&gt;for that system&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The usage of that function, let&#x27;s call it &lt;code&gt;eachSystem&lt;&#x2F;code&gt;, would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;eachSystem&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;aarch64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;x86_64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-nix&quot;&gt;&#x2F;* etc. *&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;system&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By pure accident and not a completely deliberate choice of naming&#x2F;syntax, this already exists!
It&#x27;s indeed named &lt;code&gt;eachSystem&lt;&#x2F;code&gt; and it&#x27;s provided by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&#x2F;&quot;&gt;the &lt;code&gt;flake-utils&lt;&#x2F;code&gt; flake&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With flake-utils, our final flake could look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; class=&quot;language-nix z-code&quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span class=&quot;z-source z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:nixos&#x2F;nixpkgs&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;inputs&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;flake-utils&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;url&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;github:numtide&#x2F;flake-utils&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;outputs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-entity z-function z-2 z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-function z-1 z-nix&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;... &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-function z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;eachSystem&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;aarch64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-nix&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-double z-start z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;x86_64-darwin&lt;span class=&quot;z-punctuation z-definition z-string z-double z-end z-nix&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-function z-4 z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-function z-nix&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;let&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-nix&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;nixpkgs&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-inherit z-nix&quot;&gt;inherit&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-attribute-name z-single z-nix&quot;&gt;system&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-inherit z-nix&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-keyword z-other z-nix&quot;&gt;in&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;devShells&lt;&#x2F;span&gt;.&lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;mkShell&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-attrset-or-function z-nix&quot;&gt;{&lt;&#x2F;span&gt;
          &lt;span class=&quot;z-entity z-other z-attribute-name z-multipart z-nix&quot;&gt;packages&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bind z-nix&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;[&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-nix&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-name z-nix&quot;&gt;cowsay&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-list z-nix&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-expression z-nix&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-bind z-nix&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-attrset z-nix&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;flake-utils provides a &lt;code&gt;lib&lt;&#x2F;code&gt; output that doesn&#x27;t require a system - it only uses Nix&#x27;s standard library to transform the list of systems and the function we pass to it.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;eachSystem&lt;&#x2F;code&gt; function will take the list of systems we want to support, and make sure the &lt;code&gt;default&lt;&#x2F;code&gt; entry in &lt;code&gt;devShells&lt;&#x2F;code&gt; ends up under the key specific to each system:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; nix flake show&lt;&#x2F;span&gt;

&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;path:&#x2F;Users&#x2F;kubukoz&#x2F;projects&#x2F;flake-demos?lastModified&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;1666579399&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&amp;amp;narHash=sha256-l3Vr9psJPPsbBzZ00XSWhlcZHGonMX3rVxO51G+G1zc=&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄdevShells&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îú‚îÄ‚îÄ‚îÄaarch64-darwin&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îÇ&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;   ‚îî‚îÄ‚îÄ‚îÄdefault: development environment &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;nix-shell&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄx86_64-darwin&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;‚îî‚îÄ‚îÄ‚îÄdefault:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; development environment &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;nix-shell&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might also want to try &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&#x2F;#eachdefaultsystem---system---attrs&quot;&gt;&lt;code&gt;eachDefaultSystem&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which hardcodes the list of systems to the &amp;quot;default&amp;quot; platforms &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&#x2F;blob&#x2F;c0e246b9b83f637f4681389ecabcb2681b4f3af0&#x2F;default.nix#L3-L9&quot;&gt;listed in flake-utils&lt;&#x2F;a&gt;. Also, check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&#x2F;#simpleflake---attrs---attrs&quot;&gt;&lt;code&gt;simpleFlake&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;on-ease-of-use&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#on-ease-of-use&quot; aria-label=&quot;Anchor link for: on-ease-of-use&quot;&gt;On ease of use&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now, I know all of this is pretty complicated. There&#x27;s still a high barrier to entry and a steep learning curve to getting started with Nix, even with Flakes being an attempt to simplify the ways of working with it.
There are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;3843&quot;&gt;ongoing&lt;&#x2F;a&gt; discussions around the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;3849&quot;&gt;usability&lt;&#x2F;a&gt; of Nix and of Flakes, and we&#x27;re likely to see improvements to it in the future, but so far it&#x27;s as simple as it gets.&lt;&#x2F;p&gt;
&lt;p&gt;While I wish it could be simplified for the beginner user, I understand that Nix deals with a lot of essential complexity (inherent to the problem it attempts to solve). It&#x27;s not optimizing for the &amp;quot;hello world&amp;quot; experience - it optimizes for the build system working at scale, when the builds and shells get more convoluted.
I trust that its creators know how complex the average build can get, given they&#x27;ve been working with this ecosystem for almost 20 years.&lt;&#x2F;p&gt;
&lt;p&gt;There are other tools built on top of Nix that provide a more newcomer-friendly experience. One of them is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;devshell&quot;&gt;devshell&lt;&#x2F;a&gt; (which I think could use some simplification in the documentation). If you want to get the Nix shell powers without forcing your entire team to learn the language, that might work for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parting-words&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#parting-words&quot; aria-label=&quot;Anchor link for: parting-words&quot;&gt;Parting words&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To sum up, in this article we covered:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a brief introduction to Nix and Flakes&lt;&#x2F;li&gt;
&lt;li&gt;defining a Nix shell in a flake&lt;&#x2F;li&gt;
&lt;li&gt;some parts of the Nix language&#x27;s syntax&lt;&#x2F;li&gt;
&lt;li&gt;supporting multiple systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;as well as a couple other things.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that it gives you a decent enough introduction to Flakes that will help you start enjoying the benefits of Nix, as well as encourage you to learn the parts we didn&#x27;t cover, on your own.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any questions that you feel this post should&#x27;ve answered but didn&#x27;t, let me know in the comments below.
Thanks for reading!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgements&quot; aria-label=&quot;Anchor link for: acknowledgements&quot;&gt;Acknowledgements&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Many thanks to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Baccata&#x2F;&quot;&gt;Olivier M√©lois&lt;&#x2F;a&gt; for an initial read of this post.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Talks</title>
		<published>2022-10-22T00:00:00+00:00</published>
		<updated>2022-10-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/talks/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/talks/</id>
		<content type="html">&lt;p&gt;Here&#x27;s a list of all the talks I&#x27;ve given to date, with slides and videos if available.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Title&lt;&#x2F;th&gt;&lt;th&gt;Year&lt;&#x2F;th&gt;&lt;th&gt;Links&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Pain-free APIs with Smithy4s&lt;&#x2F;td&gt;&lt;td&gt;2023&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;uwolnij-swoje-api-od-bolu-z-smithy4s-c06de564-4646-422e-befd-dabd4579e5e1&quot;&gt;slides (PL)&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Things I didn&#x27;t want to know about JVM bytecode but learned anyway&lt;&#x2F;td&gt;&lt;td&gt;2022&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;things-jvm&#x2F;dist&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Nix for Scala folks&lt;&#x2F;td&gt;&lt;td&gt;2022&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;nix-for-scala-folks&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Connecting the dots - building and structuring a functional application in Scala&lt;&#x2F;td&gt;&lt;td&gt;2021&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;connecting-the-dots-building-and-structuring-a-functional-application-in-scala&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JbMjq8VehLc&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Irresistible party tricks with cats-tagless&lt;&#x2F;td&gt;&lt;td&gt;2020&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;irresistible-party-tricks-with-cats-tagless&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rzS9lkg3Cf8&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Keep your sanity with compositional tracing&lt;&#x2F;td&gt;&lt;td&gt;2020&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;keep-your-sanity-with-compositional-tracing&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=CKS8c1di3Z0&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Introduction to interruption&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;introduction-to-interruption&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=EQWAQF6Yj5Q&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;A sky full of streams&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;a-sky-full-of-streams&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=oluPEFlXumw&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Flawless testing for the functional folks&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;flawless-testing-for-the-functional-folks&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;368027707&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;A server is just a function: introduction to http4s&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;a-server-is-just-a-function-introduction-to-http4s&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9YsZ8loRVDA&quot;&gt;recording¬†1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=jwKzluH5jFg&quot;&gt;recording¬†2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Conquering concurrency with functional programming&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;kubukoz&#x2F;conquering-concurrency-with-functional-programming&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=6z6C1EmxzaI&quot;&gt;recording¬†1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=fZO2lV2xjEo&quot;&gt;recording¬†2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Lightweight, functional microservices with http4s and doobie&lt;&#x2F;td&gt;&lt;td&gt;2019&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;http4s-doobie-micro&#x2F;slides&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=fQfMiUDsLv4&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Incremental purity&lt;&#x2F;td&gt;&lt;td&gt;2018&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;incremental-purity&#x2F;slides&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Typelevel alchemist&lt;&#x2F;td&gt;&lt;td&gt;2018&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;typelevel-alchemist&#x2F;slides&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Legacy code from day one&lt;&#x2F;td&gt;&lt;td&gt;2018&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;legacy-code-from-day-1&#x2F;slides&#x2F;#&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=6FYISbNdanE&quot;&gt;recording&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Fantastic monads and where to find them&lt;&#x2F;td&gt;&lt;td&gt;2017&#x2F;2018&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;fantastic-monads-and-where-to-find-them&#x2F;slides&#x2F;#&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=hOvyL28t0Yc&quot;&gt;recording¬†1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=HMs_F7LXTak&quot;&gt;recording¬†2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7 sins of a Scala beginner&lt;&#x2F;td&gt;&lt;td&gt;2016&#x2F;2017&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;seven-sins-of-a-scala-developer&#x2F;slides&#x2F;#&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;8ZAKrcnQ7Ww&quot;&gt;recording¬†1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=Z2YzCzfUNNk&quot;&gt;recording¬†2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Macro sourcery&lt;&#x2F;td&gt;&lt;td&gt;2016&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;macro-sourcery&#x2F;slides&#x2F;#&#x2F;&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=-ayx8NIDv4Q&quot;&gt;recording¬†1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=KvZlYAOtzmU&quot;&gt;recording¬†2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning vim by blogging</title>
		<published>2019-04-30T00:00:00+00:00</published>
		<updated>2019-04-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/learning-vim-by-blogging/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/learning-vim-by-blogging/</id>
		<content type="html">&lt;p&gt;I decided that writing about something is one of the easiest ways to learn it for a longer period of time. In this blog post, which I hope to update once in a while, I&#x27;ll be sharing my findings about Vim (neovim).&lt;&#x2F;p&gt;
&lt;p&gt;This post will be written exclusively in (variants of) Vim.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;go-to-the-next-previous-occurrence-of-a-character&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#go-to-the-next-previous-occurrence-of-a-character&quot; aria-label=&quot;Anchor link for: go-to-the-next-previous-occurrence-of-a-character&quot;&gt;Go to the next&#x2F;previous occurrence of a character&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To go to the next occurrence of a character, use &lt;code&gt;t&lt;&#x2F;code&gt; (sets the cursor before the character) or &lt;code&gt;f&lt;&#x2F;code&gt; (on the character). To find the previous one, use &lt;code&gt;T&lt;&#x2F;code&gt; (after the character) or &lt;code&gt;F&lt;&#x2F;code&gt; (on the character).&lt;&#x2F;p&gt;
&lt;p&gt;For example, in this line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; bar&lt;span class=&quot;z-text z-xml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-xml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-xml&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-xml&quot;&gt; + 5
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If I want to select &lt;code&gt;= bar&lt;&#x2F;code&gt; (space included), I can press &lt;code&gt;F=&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;copy-paste-to-clipboard&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#copy-paste-to-clipboard&quot; aria-label=&quot;Anchor link for: copy-paste-to-clipboard&quot;&gt;Copy&#x2F;paste to clipboard&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To copy to the buffer inside Vim, you press &lt;code&gt;y&lt;&#x2F;code&gt; after selecting some text. To copy it to the clipboard, you use &lt;code&gt;&amp;quot;*y&lt;&#x2F;code&gt;. Similarly with &lt;code&gt;p&lt;&#x2F;code&gt; for pasting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-to-first-last-line-of-file&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#go-to-first-last-line-of-file&quot; aria-label=&quot;Anchor link for: go-to-first-last-line-of-file&quot;&gt;Go to first&#x2F;last line of file&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Press &lt;code&gt;gg&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;G&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-to-beginning-end-of-line&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#go-to-beginning-end-of-line&quot; aria-label=&quot;Anchor link for: go-to-beginning-end-of-line&quot;&gt;Go to beginning&#x2F;end of line&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Press &lt;code&gt;^&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;$&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;g_&lt;&#x2F;code&gt; moves you to the last non-blank character.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;A&lt;&#x2F;code&gt; moves you to the end of the line and switches to editing (A as in Append), to do the same at the beginning use &lt;code&gt;I&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#links&quot; aria-label=&quot;Anchor link for: links&quot;&gt;Links&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.cyberciti.biz&#x2F;faq&#x2F;howto-unix-linux-vi-vim-jump-to-end-of-file&#x2F;&quot;&gt;vi &#x2F; vim: Jump To End Of File Command&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2332513&#x2F;vim-select-to-character-non-inclusive&quot;&gt;vim: select to character, non-inclusive&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Data coherence at large</title>
		<published>2019-04-14T00:00:00+00:00</published>
		<updated>2019-04-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/data-coherence-at-large/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/data-coherence-at-large/</id>
		<content type="html">&lt;p&gt;A week ago, while coming back from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;scalar-conf.com&quot;&gt;Scalar&lt;&#x2F;a&gt;, I was thinking about coherent data. In particular, I was wondering if it&#x27;s possible to perform certain simple validations and encode their results in types. Here&#x27;s what i found.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-coherent-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-coherent-data&quot; aria-label=&quot;Anchor link for: what-is-coherent-data&quot;&gt;What is coherent data&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The concept of coherent data was introduced to me when I watched &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=gVXt1RG_yN0&quot;&gt;Daniel Spiewak&#x27;s talk about coherence&lt;&#x2F;a&gt;. Data coherence is achieved when we have a single source of truth about our data. Let&#x27;s look at an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Rachel&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;result&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;isEmpty&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;else&lt;&#x2F;span&gt; name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;get
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this code we don&#x27;t have any sort of coherence in the data. One condition that we check - the emptiness of &lt;code&gt;name&lt;&#x2F;code&gt; - gives us information that is immediately lost in the rest of the code. Even if we&#x27;ve checked for the emptiness and are sure that the Option isn&#x27;t empty, there&#x27;s nothing in the type system or any other feature of the language that would tell us whether we can call &lt;code&gt;Option#get&lt;&#x2F;code&gt; on it safely. We only know that because we keep in mind that we&#x27;ve already checked for the emptiness ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;Another example involves lists:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;names&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Phoebe&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Joey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Ross&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;firstNameLength&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;names&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;isEmpty&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;names&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;head&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even though we&#x27;ve checked for the list&#x27;s emptiness, we still have no guarantee that &lt;code&gt;head&lt;&#x2F;code&gt;, which is in general not a safe method to call on a list, won&#x27;t throw an exception.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no connection between &lt;code&gt;isEmpty&lt;&#x2F;code&gt; and &lt;code&gt;head&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;get&lt;&#x2F;code&gt; enforced by the compiler. It&#x27;s just incapable of helping us avoid mistakes like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;isEmpty&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;head&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;boom!&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is this the way it&#x27;s meant to be? Is it possible to make the compiler work with us to ensure some guarantees about our data?&lt;&#x2F;p&gt;
&lt;p&gt;In Kotlin, another language that works on the JVM (mostly), there is a feature that solves this particular problem we had with Option: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kotlinlang.org&#x2F;docs&#x2F;typecasts.html#smart-casts&quot;&gt;smart casts&lt;&#x2F;a&gt;. But the feature is limited to checking types or nullity, while we&#x27;re looking for something that&#x27;ll work in the general case.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, there&#x27;re features in Scala that allow us to reason about our data as coherent: pattern matching and higher-order functions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-coherence-with-pattern-matching&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-coherence-with-pattern-matching&quot; aria-label=&quot;Anchor link for: data-coherence-with-pattern-matching&quot;&gt;Data coherence with pattern matching&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s rewrite the examples from the previous section using pattern matching:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Rachel&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;result&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; name &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; v
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much better - now we managed to get both the emptiness check and the extraction in one go (in the pattern match). We&#x27;re not calling any unsafe methods, and we get additional help from the compiler in the form of exhaustivity checking. What about lists?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;names&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Phoebe&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Joey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Ross&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;firstNameLength&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; names &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Nil&lt;&#x2F;span&gt;            &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;firstName&lt;&#x2F;span&gt; :: &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;firstName&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, we&#x27;re not calling &lt;code&gt;head&lt;&#x2F;code&gt; or any other unsafe method. And the check is again combined with the extraction in a single pattern match.&lt;&#x2F;p&gt;
&lt;p&gt;I mentioned higher-order functions, so what about them? Turns out that pattern matches (and functions implemented using them) can often be rewritten using a single call to &lt;code&gt;fold&lt;&#x2F;code&gt; for the given data type. It&#x27;s more obvious in the case of Option:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Rachel&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;result&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;fold&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;identity&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or &lt;code&gt;Either&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;NameNotFound&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Rachel&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;result&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;fold&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;extractError&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; identity&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, &lt;code&gt;fold&lt;&#x2F;code&gt; doesn&#x27;t appear to be the right choice if we only care about part of the data (like in the list example, where we only needed the head of the list). In that particular case, a good old &lt;code&gt;headOption&lt;&#x2F;code&gt; would work just fine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-coherence-at-scale&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-coherence-at-scale&quot; aria-label=&quot;Anchor link for: data-coherence-at-scale&quot;&gt;Data coherence at scale&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is all nice and pretty - the promise of having data that doesn&#x27;t require us to watch our backs every step we take sounds encouraging. But when the data is part of other data, things start to break very soon.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we&#x27;re working with a &lt;code&gt;User&lt;&#x2F;code&gt; class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now imagine we want to run a code path only if the user has a &lt;code&gt;lastName&lt;&#x2F;code&gt; set. The caveat: we still want to pass the &lt;code&gt;User&lt;&#x2F;code&gt; instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withValidatedUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;user&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Katie&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Bouman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;last&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; withValidatedUser&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;last&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;pure&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;42&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What&#x27;s the problem? Well, even though we did the validation in a coherent way using a pattern match, we lose the coherence inside &lt;code&gt;withValidatedUser&lt;&#x2F;code&gt;: &lt;code&gt;lastName&lt;&#x2F;code&gt; is now completely separated from the &lt;code&gt;User&lt;&#x2F;code&gt; object it came from. And now we have two &lt;code&gt;lastName&lt;&#x2F;code&gt;s: one optional, one required.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withValidatedUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;lastName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is terrible news. It appears like we can&#x27;t maintain data coherence when the data is part of something else. Or can we?&lt;&#x2F;p&gt;
&lt;p&gt;Surely there are ways to get what we want - one of them is adding a new variant of the &lt;code&gt;User&lt;&#x2F;code&gt; class, but with a required &lt;code&gt;lastName&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserWithLast&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;...but you can probably already imagine how much boilerplate it&#x27;d bring to your codebase if you needed a new class for every combination of optional fields if the &lt;code&gt;User&lt;&#x2F;code&gt; type had more than one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserWithLastAndEmail&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserNoEmail&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserNoLast&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It doesn&#x27;t seem like a viable solution to the problem. In fact, it&#x27;d create more problems than it solved.&lt;&#x2F;p&gt;
&lt;p&gt;I entertained the idea that we could parameterize our original &lt;code&gt;User&lt;&#x2F;code&gt; with type parameters a bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;just so that we have some distinction below&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;LastName&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withValidatedUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Katie&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Bouman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; try it at home: this could be a fold!&lt;&#x2F;span&gt;
user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;last&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; withValidatedUser&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;copy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;lastName &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; last&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;pure&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;42&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now a few things happened:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We&#x27;re not passing the &lt;code&gt;lastName&lt;&#x2F;code&gt; value separately now&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;lastName&lt;&#x2F;code&gt; being required is now a type-level prerequisite in &lt;code&gt;withValidatedUser&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re copying the &lt;code&gt;user&lt;&#x2F;code&gt; value with &lt;code&gt;lastName&lt;&#x2F;code&gt; substituted with the value extracted from &lt;code&gt;Option&lt;&#x2F;code&gt; using a pattern match&lt;&#x2F;li&gt;
&lt;li&gt;We only have one data type that supports all combinations of emptiness&#x2F;non-emptiness using type parameters.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;What does this give us?&lt;&#x2F;p&gt;
&lt;p&gt;We gained type safety in &lt;code&gt;withValidatedUser&lt;&#x2F;code&gt; - the function now can&#x27;t be called with a &lt;code&gt;User&lt;&#x2F;code&gt; whose &lt;code&gt;lastName&lt;&#x2F;code&gt; hasn&#x27;t been checked for non-emptiness. It just won&#x27;t compile if we pass an &lt;code&gt;Option&lt;&#x2F;code&gt; in that field. One less test case to worry about.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also pretty interesting that we can now write functions that require the user to &lt;strong&gt;not&lt;&#x2F;strong&gt; have a second name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withInvalidUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For me, the most surprising part here was that I couldn&#x27;t use &lt;code&gt;Nothing&lt;&#x2F;code&gt; as the type of &lt;code&gt;lastName&lt;&#x2F;code&gt; - which I wanted to do to guarantee that &lt;code&gt;lastName&lt;&#x2F;code&gt; just isn&#x27;t there. However, we can&#x27;t create values of type &lt;code&gt;Nothing&lt;&#x2F;code&gt;, and we can&#x27;t pass them as constructor parameters of a class. I used &lt;code&gt;Unit&lt;&#x2F;code&gt; instead, which is a type with only one value, which is obviously not the user&#x27;s last name. Creating a user with &lt;code&gt;LastName = Unit&lt;&#x2F;code&gt; is also very easy: &lt;code&gt;User(&amp;quot;Joe&amp;quot;,  ())&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s the problem with the latest solution?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We made it more difficult to work with the User type - now everyone who uses that type needs to be aware that the &lt;code&gt;lastName&lt;&#x2F;code&gt; field is parameterized. And it&#x27;s viral - pretty soon all the codebase will be littered with type parameters irrelevant in these regions of code.&lt;&#x2F;li&gt;
&lt;li&gt;We can insert any type we want as &lt;code&gt;LastName&lt;&#x2F;code&gt;. It could even be &lt;code&gt;IO[Unit]&lt;&#x2F;code&gt;. And it&#x27;s very easy to do so.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Looks like we aren&#x27;t quite there yet. What can we do to make our type easier to work with?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-different-kind-of-coherence&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-different-kind-of-coherence&quot; aria-label=&quot;Anchor link for: a-different-kind-of-coherence&quot;&gt;A different kind of coherence&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Our original goal in the exercise was to encode validations and invariants of our data in the data&#x27;s type. Let&#x27;s get back to our &lt;code&gt;User&lt;&#x2F;code&gt; example. This time we&#x27;ll encode it using higher-kinded types (but with two &amp;quot;variable-effect&amp;quot; fields):&lt;&#x2F;p&gt;
&lt;p&gt;(if you&#x27;re not familiar with higher-kinded types, I suggest you &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;blog&#x2F;2016&#x2F;08&#x2F;21&#x2F;hkts-moving-forward.html&quot;&gt;check out some blog posts&lt;&#x2F;a&gt;. For now, it should be enough to know that a higher-kinded type is a type-level function, or a type that needs to be applied with another type to construct a fully concrete type that can be assigned to a value. For example &lt;code&gt;Option&lt;&#x2F;code&gt; needs an &lt;code&gt;A&lt;&#x2F;code&gt; to become &lt;code&gt;Option[A]&lt;&#x2F;code&gt;, a type that has values.&lt;&#x2F;p&gt;
&lt;p&gt;If we parameterize &lt;code&gt;User&lt;&#x2F;code&gt; with higher-kinded types, we get this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool. How do we create a &lt;code&gt;User&lt;&#x2F;code&gt; with all fields optional now?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;jon&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Jon&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Snow&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How do we create one with some fields required?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; old trick from scalaz&#x2F;cats&#x2F;shapeless&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;jon&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Jon&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Snow&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also cool. We can&#x27;t assign &lt;code&gt;None&lt;&#x2F;code&gt; as the value of &lt;code&gt;lastName&lt;&#x2F;code&gt; if &lt;code&gt;LastName&lt;&#x2F;code&gt; is &lt;code&gt;Id&lt;&#x2F;code&gt;. How would we encode the requirement that there&#x27;s no email now?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;donald&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Donald&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Duck&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-scala&quot;&gt;()&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we cheated a bit - the goal of parameterizing our type with higher-kinded types was to ensure that we always have &lt;code&gt;String&lt;&#x2F;code&gt; (or whatever used to be in an &lt;code&gt;Option&lt;&#x2F;code&gt;) in an effect (like &lt;code&gt;Option&lt;&#x2F;code&gt; or &lt;code&gt;Id&lt;&#x2F;code&gt;), but if the effect is &lt;code&gt;A =&amp;gt; Unit&lt;&#x2F;code&gt;, we have no &lt;code&gt;String&lt;&#x2F;code&gt; in the result whatsoever. Is it bad?&lt;&#x2F;p&gt;
&lt;p&gt;Maybe, maybe not.&lt;&#x2F;p&gt;
&lt;p&gt;If we have type parameters for our data, we can&#x27;t make it obligatory to have &lt;code&gt;String&lt;&#x2F;code&gt; anywhere in the type of &lt;code&gt;Email&lt;&#x2F;code&gt;. (well, maybe we could, using some more type-level machinery and implicits, but I don&#x27;t want to go that deep into it).&lt;&#x2F;p&gt;
&lt;p&gt;However, we&#x27;re making it harder to use a type that doesn&#x27;t have the &lt;code&gt;String&lt;&#x2F;code&gt; in it (&lt;code&gt;Option&lt;&#x2F;code&gt; is a more obvious choice for a type parameter than, say, &lt;code&gt;Œª[A =&amp;gt; Int]&lt;&#x2F;code&gt;, which would mean that &lt;code&gt;lastName&lt;&#x2F;code&gt; is of type &lt;code&gt;Int&lt;&#x2F;code&gt;). And we still get an escape hatch that allows us to omit some fields in a &lt;code&gt;User&lt;&#x2F;code&gt; value (by saying that &lt;code&gt;lastName&lt;&#x2F;code&gt; is of type &lt;code&gt;Unit&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Instead of a custom &lt;code&gt;Void&lt;&#x2F;code&gt; type, we could&#x27;ve used &lt;code&gt;Const&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;data&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;Const&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;john&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Const&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-hole z-scala&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;John&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;De Goes&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Const&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-scala&quot;&gt;()&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
john&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;email&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;getConst &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; equals ()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We had at least two problems with the previous solution:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;the type parameters would spread out to every place in the codebase where &lt;code&gt;User&lt;&#x2F;code&gt; appears.&lt;&#x2F;li&gt;
&lt;li&gt;we didn&#x27;t have type-level hints as to what type we should use.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I believe the second problem is not an issue anymore (see above argument about &lt;code&gt;Unit&lt;&#x2F;code&gt;), but the first one remains: everywhere we had&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;def foo: User =&amp;gt; A&lt;&#x2F;code&gt;, we&#x27;ll now have&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;def foo[F[_], G[_]]: User[F, G] =&amp;gt; A&lt;&#x2F;code&gt;. What can we do to make this a little more pleasant, and to avoid spreading every single type parameter to pieces of code that don&#x27;t care about the contents of our parameterized fields?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variance-and-higher-kinded-types&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#variance-and-higher-kinded-types&quot; aria-label=&quot;Anchor link for: variance-and-higher-kinded-types&quot;&gt;Variance and higher kinded types&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Thankfully, Scala has quite powerful support for variance annotations. We can use it to our advantage: to make our type easier to work with.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we are writing a function that takes a user but only uses their first name - which isn&#x27;t type parameterized. Let&#x27;s recall the definition of &lt;code&gt;User&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s add some variance annotations...&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bound z-scala&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bound z-scala&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; apparently, Any is kind-polymorphic&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; and counts as a suitable * -&amp;gt; * kinded type!&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Arb&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Making our type covariant in both type parameters should allow us to pass a &lt;code&gt;User[F, G]&lt;&#x2F;code&gt; for any &lt;code&gt;F&lt;&#x2F;code&gt; and &lt;code&gt;G&lt;&#x2F;code&gt; where a &lt;code&gt;User[Any, Any]&lt;&#x2F;code&gt; (&lt;code&gt;User.Arb&lt;&#x2F;code&gt;) is required. Let&#x27;s see if it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;nameTwice&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Arb&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name ++ user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name

&amp;gt; nameTwice&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Mike&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;mike@evilmail.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
res0&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MikeMike&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks like it does. However, maybe hardcoding &lt;code&gt;Any, Any&lt;&#x2F;code&gt; isn&#x27;t the best solution there - what if at some point we actually want to perform some validation and use the parameterized fields? Maybe a better encoding would be this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;class User defined as above&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; User&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Canonical&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we could write functions taking &lt;code&gt;User.Canonical&lt;&#x2F;code&gt; as the base case, and only customize the functions that we want to work with certain types of &lt;code&gt;User&lt;&#x2F;code&gt; specifically.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;worksWithAllUsers&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Canonical&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;email&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;email&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
      withFullUser&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
        user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;copy&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
          lastName &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; lastName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
          email &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; email
        &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
      withPartialUser&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;copy&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;lastName &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; lastName&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
      &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Default&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default@evilmail.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withFullUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;email&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;withPartialUser&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lastName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default@evilmail.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;other-possible-use-cases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-possible-use-cases&quot; aria-label=&quot;Anchor link for: other-possible-use-cases&quot;&gt;Other possible use cases&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What other invariants can we encode?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option[A]&lt;&#x2F;code&gt; can become &lt;code&gt;A&lt;&#x2F;code&gt; or &lt;code&gt;Unit&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Either[A, B]&lt;&#x2F;code&gt; can become &lt;code&gt;B&lt;&#x2F;code&gt; or &lt;code&gt;A&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List[A]&lt;&#x2F;code&gt; can become &lt;code&gt;Unit&lt;&#x2F;code&gt; (empty list) or &lt;code&gt;(A, List[A])&lt;&#x2F;code&gt; (&lt;code&gt;NonEmptyList[A]&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(note how we&#x27;re deconstructing the data types, which happen to be ADTs, into coproducts)&lt;&#x2F;p&gt;
&lt;p&gt;If we&#x27;re really trying to experiment, we can go the extra mile:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List[A]&lt;&#x2F;code&gt; can be checked for length and encoded as &lt;code&gt;Sized[List[A], 5]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;User[IO[A]]&lt;&#x2F;code&gt; can become &lt;code&gt;IO[User[A]]&lt;&#x2F;code&gt; (sounds like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;traverse.html&quot;&gt;&lt;code&gt;Traverse&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, doesn&#x27;t it?) - we can run the IO outside and keep the result to avoid unnecessary recalculation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;User[Stream[IO, A]]&lt;&#x2F;code&gt; can become &lt;code&gt;IO[User[List[A]]]&lt;&#x2F;code&gt; - we can run the stream and work with it as a list, once it&#x27;s all consumed (that is, if it fits into the memory).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s a lot we can do, really:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;NonEmptyString&lt;&#x2F;code&gt;, &lt;code&gt;regex&amp;quot;(a-Z)+&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;IPv4&lt;&#x2F;code&gt;, &lt;code&gt;INetAddress&lt;&#x2F;code&gt; refined types&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Int&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;PosInt&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;EvenInt&lt;&#x2F;code&gt; refined types, smaller primitives (&lt;code&gt;Byte&lt;&#x2F;code&gt;, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are a few good reasons for trying to make our data coherent, including but not limited to using the techniques mentioned in this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;additional type safety by enforcing constraints locally on the type level&lt;&#x2F;li&gt;
&lt;li&gt;increased ease of putting code under test - if your function doesn&#x27;t depend on &lt;code&gt;lastName&lt;&#x2F;code&gt;, you can pass &lt;code&gt;()&lt;&#x2F;code&gt; in that field safely&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, there are difficulties associated with all that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;type parameters creeping into all your functions (possibly can be avoided by introducing a canonical type and only being specific when it&#x27;s needed)&lt;&#x2F;li&gt;
&lt;li&gt;it&#x27;s questionable whether parameterizing data with types scales (e.g. if we have &lt;code&gt;case class Users[Collection[_], LastName[_]](users: Collection[User[LastName]])&lt;&#x2F;code&gt;, is it going to be easy to change?)&lt;&#x2F;li&gt;
&lt;li&gt;the benefit might not be that significant after all&lt;&#x2F;li&gt;
&lt;li&gt;it was mentioned in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fanf42&#x2F;status&#x2F;1117684098364055552&quot;&gt;the replies&lt;&#x2F;a&gt; that type-parameterizing e.g. JSON models can break tooling like circe, magnolia, etc. - most likely because they don&#x27;t support &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;GADT&quot;&gt;GADTs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;possibly more problems that I haven&#x27;t figured out yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I haven&#x27;t seen this approach to abstracting on data used anywhere, so I don&#x27;t know what the best practice is, and whether the idea is feasible for use in real projects, but it certainly seems worth investigating.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe type-parameterized data would work better with lenses (e.g. from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.optics.dev&#x2F;Monocle&#x2F;&quot;&gt;Monocle&lt;&#x2F;a&gt;) to make the work with copying more pleasant and less boilerplatey?&lt;&#x2F;p&gt;
&lt;p&gt;As some of our validations involved e.g. breaking up &lt;code&gt;Option&lt;&#x2F;code&gt; into a tagged coproduct of &lt;code&gt;Unit&lt;&#x2F;code&gt; and &lt;code&gt;A&lt;&#x2F;code&gt; (which it is), maybe the techniques mentioned in this post could be used together with optics like Prisms (which are meant for working with coproducts) to form more powerful abstractions?&lt;&#x2F;p&gt;
&lt;p&gt;Maybe we could have a &lt;code&gt;Monad&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Traverse&lt;&#x2F;code&gt;&#x2F;whatever instance for a type like &lt;code&gt;case class User[LastName[_], Email[_]](...)&lt;&#x2F;code&gt; for each of its fields to get additional functionality for free using the functions defined on the appropriate typeclass?&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, more insight into the possibilities is needed to determine if the concept can be used more widely in our code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parting-words&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#parting-words&quot; aria-label=&quot;Anchor link for: parting-words&quot;&gt;Parting words&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Thank you for reading.&lt;&#x2F;p&gt;
&lt;p&gt;These ideas are very fresh for me, and I haven&#x27;t spent a lot of time researching them yet. In the future, I hope to spend more time in this area and to develop a more formal or constrained description of the ideas mentioned here.&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly, I hope to find out whether these ideas actually help achieve more type safety without sacrificing maintainability in real world programming.&lt;&#x2F;p&gt;
&lt;p&gt;Let me know what you think about the ideas presented in this post, and whether you enjoyed reading it!&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hmemcpy&quot;&gt;Igal Tabachnik (@hmemcpy)&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;etaty&quot;&gt;Val√©rian (@etaty)&lt;&#x2F;a&gt; who found and reported a few bugs in this post. I should get around to using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scalameta&#x2F;mdoc&quot;&gt;mdoc&lt;&#x2F;a&gt; already...&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What makes a function pure?</title>
		<published>2018-12-02T00:00:00+00:00</published>
		<updated>2018-12-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.kubukoz.com/preview/what-makes-a-function-pure/" type="text/html"/>
		<id>https://blog.kubukoz.com/preview/what-makes-a-function-pure/</id>
		<content type="html">&lt;p&gt;Everyone knows that naming things is hard. In fact, often it seems to be one of the hardest things
in computer science and programming in general. In addition, sometimes a single word has multiple meanings,
or worse - a term is explained in a variety of slightly differing definitions. One such term is a pure function.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I&#x27;m by no means an expert in functional programming, but the definition of a pure function that I consider to be true
is the same one as plenty of people use.&lt;&#x2F;p&gt;
&lt;p&gt;That definition doesn&#x27;t distinguish pure and impure functions, though - all functions are
pure, but the impure things we sometimes call functions, aren&#x27;t. They are impure, and I call them procedures.&lt;&#x2F;p&gt;
&lt;p&gt;What makes a function a function, then?&lt;&#x2F;p&gt;
&lt;p&gt;The point of this post is to answer that question in a way that&#x27;ll be relatively easy
to understand for people with basic to intermediate experience with programming and Scala.&lt;&#x2F;p&gt;
&lt;p&gt;The definition for a function (and for functional programming) I use is very similar
to the one &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jdegoes&#x2F;status&#x2F;936301872066977792&quot;&gt;John A de Goes tweeted some time ago&lt;&#x2F;a&gt;. Functions are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Total - they are defined for every input&lt;&#x2F;li&gt;
&lt;li&gt;Deterministic - a function will always return the same value given the same input.&lt;&#x2F;li&gt;
&lt;li&gt;Pure - their only effect is computing their output&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If we define functions like the above, then functional programming is
programming with functions,without procedures.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at these properties and see how they differ from those of what I defined as procedures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;totality&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#totality&quot; aria-label=&quot;Anchor link for: totality&quot;&gt;Totality&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For a function to be total, we must make sure that it returns a value
for every kind of input that the compiler allows it to take.
That means it can&#x27;t throw exceptions to the caller, like in the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;trimmed&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;trim
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;trimmed&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;isEmpty&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-jump z-scala&quot;&gt;throw&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Name is empty!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;else&lt;&#x2F;span&gt; trimmed
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above code compiles, and &lt;code&gt;validate(&amp;quot;&amp;quot;)&lt;&#x2F;code&gt; will compile too (as a method call
with a result type of &lt;code&gt;String&lt;&#x2F;code&gt;), but it&#x27;ll crash at runtime, unless the exception is caught.
That makes &lt;code&gt;validate&lt;&#x2F;code&gt; a partial function, because it doesn&#x27;t have a
defined value of its declared type (&lt;code&gt;String&lt;&#x2F;code&gt;) for an empty string - in fact,
it doesn&#x27;t have one for any kind of input consisting exclusively of whitespace.&lt;&#x2F;p&gt;
&lt;p&gt;One functional alternative to this would be to use &lt;code&gt;Option&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;trim &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;None&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;trimmed&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;trimmed&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or, if you want more information about the origin of failure, &lt;code&gt;Either&lt;&#x2F;code&gt; (if you
like typed errors, that&#x27;d probably involve creating an ADT for possible errors):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Product&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;with&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Serializable&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; NameIsEmpty&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;UserError&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserError&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
  user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;trim &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;NameIsEmpty&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;trimmed&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;trimmed&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another solution would involve tagless style with &lt;code&gt;ApplicativeError&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;UserErrors&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;ApplicativeError&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserError&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bound z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserErrors&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  user&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;name&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;trim
    &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;some&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;filter&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nonEmpty&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;liftTo&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;NameIsEmpty&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserError&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;E&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
validate&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;E&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By moving from throwing exceptions, we gain in at least a few ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it becomes more explicit for the callers what kind of errors they can observe in case of failure&lt;&#x2F;li&gt;
&lt;li&gt;the types will tell us whether a function actually can fail or not&lt;&#x2F;li&gt;
&lt;li&gt;we avoid the overhead of creating an exception&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and our function becomes total, because invalid inputs will give us a value (e.g. a &lt;code&gt;Left&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;determinism&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#determinism&quot; aria-label=&quot;Anchor link for: determinism&quot;&gt;Determinism&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In order for a function to be deterministic, it has to return the same value
every time it&#x27;s called with the same arguments. Because of that, something like the following is not pure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nextInt&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The type of &lt;code&gt;foo&lt;&#x2F;code&gt; is &lt;code&gt;() =&amp;gt; Int&lt;&#x2F;code&gt;, or &lt;code&gt;Unit =&amp;gt; Int&lt;&#x2F;code&gt;, so we can basically say that
it has one possible input (the value &lt;code&gt;()&lt;&#x2F;code&gt; of type &lt;code&gt;Unit&lt;&#x2F;code&gt;, in this case represented
by &amp;quot;no arguments passed&amp;quot;). This would mean that every call to this function will
return the same value, but it&#x27;s quite the opposite - it&#x27;ll usually return completely different values.&lt;&#x2F;p&gt;
&lt;p&gt;A simple way to ensure determinism of the above would be to allow passing
a seed to the randomizer, instead of using a global Random instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;seed&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nextInt&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, calling &lt;code&gt;foo&lt;&#x2F;code&gt; with the same input will yield the same outputs.&lt;&#x2F;p&gt;
&lt;p&gt;Another example of a nondeterministic function can be a simple call to a database:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;let&amp;#39;s pretend I&amp;#39;m using Slick&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;findAllUsers&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;User&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;f&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; db&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;run &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;TableQuery&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Users&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;to&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;result
  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;please don&amp;#39;t do this in real code&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Await&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;result&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;f&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;seconds&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Await&lt;&#x2F;code&gt; call was added only to make sure that we have a result immediately when the function completes.&lt;&#x2F;p&gt;
&lt;p&gt;If we change the state of the database between a few calls to this function,
it&#x27;ll yield different results. A functional, yet implausible solution would be to
pass the state of the database as input to the function, or use some sort of &lt;code&gt;State&lt;&#x2F;code&gt; monad.
An alternative, arguably better solution would be to suspend
the side effect (reading from external mutable state) in an effect,
which is what we&#x27;ll discuss in &lt;a href=&quot;https:&#x2F;&#x2F;blog.kubukoz.com&#x2F;preview&#x2F;what-makes-a-function-pure&#x2F;#first-class-effects&quot;&gt;the part of this post about First-class effects&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;purity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#purity&quot; aria-label=&quot;Anchor link for: purity&quot;&gt;Purity&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I already said that a function is pure because its only effect is computing its output.
Does it mean that by programming with functions we aren&#x27;t allowed to write to a database or to standard output?&lt;&#x2F;p&gt;
&lt;p&gt;Not at all! Writing functions that execute I&#x2F;O operations, or any other kind of effects,
is possible, and it&#x27;s way easier than naming things, in fact. However, it doesn&#x27;t mean
we&#x27;re allowed to have functions with side effects.&lt;&#x2F;p&gt;
&lt;p&gt;What does it mean to have side effects, and how do we get effects (like talking to
external systems) without side effects? We need referential transparency.
And side effects are its exact opposite.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;referential-transparency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#referential-transparency&quot; aria-label=&quot;Anchor link for: referential-transparency&quot;&gt;Referential transparency&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A definition of referential transparency found in
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;functional-programming-in-scala&quot;&gt;The red book (Functional Programming in Scala by Runar Bjarnason and Paul Chiusano)&lt;&#x2F;a&gt;
says:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An expression e is referentially transparent if, for all programs p,
all occurrences of e in p can be replaced by the result of evaluating e
without affecting the meaning of p.
A function f is pure if the expression f(x) is referentially transparent
for all referentially transparent x.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let me follow up with an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;2&lt;&#x2F;span&gt; + &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;e&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a + &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; e + e
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;e&lt;&#x2F;code&gt; is &lt;code&gt;a + 1&lt;&#x2F;code&gt;. Our program &lt;code&gt;p&lt;&#x2F;code&gt; has two appearances of &lt;code&gt;e&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In its current shape, the value of &lt;code&gt;p&lt;&#x2F;code&gt; can be computed by calculating &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;e&lt;&#x2F;code&gt; and &lt;code&gt;p&lt;&#x2F;code&gt; in that order:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;a = 2 + 1 = 3
e = a + 1 = 3 + 1 = 4

p = e + e = 4 + 4 = 8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we can apply the replacement of &lt;code&gt;e&lt;&#x2F;code&gt; in the original program with
the result of evaluating &lt;code&gt;e&lt;&#x2F;code&gt; (&lt;code&gt;a + 1&lt;&#x2F;code&gt;), then &lt;code&gt;e&lt;&#x2F;code&gt; is referentially transparent. Let&#x27;s do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;2&lt;&#x2F;span&gt; + &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;a + &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; + &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;a + &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What&#x27;s the value of &lt;code&gt;p&lt;&#x2F;code&gt; now?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;p = ((2 + 1) + 1) + (2 + 1) + 1) = (3 + 1) + (3 + 1) = 4 + 4 = 8&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you see, the value of &lt;code&gt;p&lt;&#x2F;code&gt; hasn&#x27;t changed. The behavior of
the program &lt;code&gt;p&lt;&#x2F;code&gt; didn&#x27;t change either, as its only effect was computing the value (which is &lt;code&gt;8&lt;&#x2F;code&gt;). That means &lt;code&gt;e&lt;&#x2F;code&gt; was referentially transparent - we replaced the reference to a value (&lt;code&gt;e&lt;&#x2F;code&gt;) with the value (&lt;code&gt;a + 1&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;This is very much like math from school - you didn&#x27;t see
anything impure in your textbooks, all your expressions were pure,
and you could apply substitution in a similar way:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;f(x) = x + 1

g(x) = f(x + 1) + f(x)
g(x) = ((x + 1) + 1) + (x + 1) = 2x + 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, no side effects. Let&#x27;s introduce some:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; x + x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we ran the above lines in a REPL session, or as part of a larger program, the effects would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the value of &lt;code&gt;p&lt;&#x2F;code&gt; becomes &lt;code&gt;2&lt;&#x2F;code&gt; (every time)&lt;&#x2F;li&gt;
&lt;li&gt;the line &lt;code&gt;Foo&lt;&#x2F;code&gt; is printed to console output once.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What would happen if we inlined &lt;code&gt;x&lt;&#x2F;code&gt; into the places where it&#x27;s used?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; + &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, if we ran the above lines, the result would be vastly different from the previous one, perhaps unsurprisingly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the value of &lt;code&gt;p&lt;&#x2F;code&gt; still becomes &lt;code&gt;2&lt;&#x2F;code&gt; (every time)&lt;&#x2F;li&gt;
&lt;li&gt;the line &lt;code&gt;Foo&lt;&#x2F;code&gt; is printed to console output &lt;strong&gt;twice&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unless all the effects of your programs are idempotent
(running them multiple times yields the same result as running them once),
which I doubt, then this should feel troubling: after all,
the only thing we did was inline a read-only variable (&lt;code&gt;val x&lt;&#x2F;code&gt;).
And now the program behaves in a different way.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s precisely because the implementation of &lt;code&gt;x&lt;&#x2F;code&gt; was impure - it had
a secondary effect (or a side effect) of console output. This could just as well be
a database-mutating call, or a &lt;code&gt;HTTP POST&lt;&#x2F;code&gt; request being sent to a remote server.
In many cases, it would become a bug.&lt;&#x2F;p&gt;
&lt;p&gt;There are other ways to break referential transparency.
If the value of &lt;code&gt;x&lt;&#x2F;code&gt; depended on external conditions (like if it was getting its value from console input),
the correctness of the program after inlining could break in many more ways:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;b&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; prog1 &lt;span class=&quot;z-keyword z-operator z-comparison z-scala&quot;&gt;==&lt;&#x2F;span&gt; prog2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above code, the tuple contained by &lt;code&gt;prog1&lt;&#x2F;code&gt; will always have
the same value in both fields. In fact, if we only ran the code up to the definition of &lt;code&gt;prog1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would be asked to enter console input once, and the value we typed
would be stored in &lt;code&gt;x&lt;&#x2F;code&gt; for as long as &lt;code&gt;x&lt;&#x2F;code&gt;&#x27;s lifetime lasts. Because of that, it&#x27;d appear twice in &lt;code&gt;prog1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, if we only ran the line where &lt;code&gt;prog2&lt;&#x2F;code&gt; is defined:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;StdIn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;readLine&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would be asked for input &lt;strong&gt;twice&lt;&#x2F;strong&gt;, and assuming there are &lt;code&gt;n&lt;&#x2F;code&gt; possible strings
we could input, the chance that both values in &lt;code&gt;prog2&lt;&#x2F;code&gt; would be the same
would be equal to only &lt;code&gt;1&#x2F;n&lt;&#x2F;code&gt; (as opposed to &lt;code&gt;100%&lt;&#x2F;code&gt; in &lt;code&gt;prog1&lt;&#x2F;code&gt;). And the only difference
between &lt;code&gt;prog1&lt;&#x2F;code&gt; and &lt;code&gt;prog2&lt;&#x2F;code&gt; was the inlining of &lt;code&gt;x = StdIn.readLine()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are many other ways to break referential transparency in Scala, for example throwing exceptions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Try&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-control z-flow z-jump z-scala&quot;&gt;throw&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-jump z-scala&quot;&gt;throw&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Exception&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Try&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or executing any kind of impure logic inside &lt;code&gt;scala.concurrent.Future&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Future&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;x zip x&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Future&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; zip &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Future&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Future&lt;&#x2F;code&gt; behaves just like a raw, uncut side effect: its value is cached, so regardless of how many times you use
an already created &lt;code&gt;Future&lt;&#x2F;code&gt;, it&#x27;ll only run once and it&#x27;ll always contain the same value upon completion or failure.
That&#x27;s because &lt;code&gt;Future&lt;&#x2F;code&gt; isn&#x27;t a description of an asynchronous computation: it&#x27;s already running one.&lt;&#x2F;p&gt;
&lt;p&gt;If we can&#x27;t rely on &lt;code&gt;Future&lt;&#x2F;code&gt; to give us the safety of refactoring (inlining values or extracting expressions to values),
does it mean we&#x27;re doomed to have side effects in meaningful Scala programs?&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, it doesn&#x27;t.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-class-effects&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-class-effects&quot; aria-label=&quot;Anchor link for: first-class-effects&quot;&gt;First-class effects&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A term often used to describe effects without side effects is &amp;quot;first class effects&amp;quot;. They are effects that don&#x27;t break
referential transparency. A workaround often used to simulate support for first class effects in Scala
involves by-name parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;artificial type&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Effectful&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-access z-scala&quot;&gt;private&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arrow z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;U&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Effectful&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;U&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Effectful&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;U&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Effectful&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-lambda z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;run&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; b&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;run&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;function with by-name parameter&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arrow z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Effectful&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Effectful&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-lambda z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; f&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; effect&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; x zip x

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; effect&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; zip effect&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, we created a new, &amp;quot;artificial&amp;quot; type &lt;code&gt;Effectful[T]&lt;&#x2F;code&gt; (it&#x27;s probably not a good idea to try
and come up with a type like this on your own). It describes a computation that will complete with a value of type &lt;code&gt;T&lt;&#x2F;code&gt;.
We gave it a method &lt;code&gt;zip&lt;&#x2F;code&gt; that will produce a new &lt;code&gt;Effectful&lt;&#x2F;code&gt; that will run two &lt;code&gt;Effectful&lt;&#x2F;code&gt; programs sequentially.&lt;&#x2F;p&gt;
&lt;p&gt;If we were to call &lt;code&gt;prog1.run()&lt;&#x2F;code&gt; or &lt;code&gt;prog2.run()&lt;&#x2F;code&gt;, you&#x27;d see that they behave identically - they&#x27;ll both print &lt;code&gt;Foo&lt;&#x2F;code&gt; twice.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, we don&#x27;t need to come up with a type like this (and I don&#x27;t recommend that you do - unless
you&#x27;re absolutely sure the existing ones don&#x27;t meet your needs).&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s plenty of competing options one can use in a similar way to how we used &lt;code&gt;Effectful&lt;&#x2F;code&gt; and &lt;code&gt;def effect&lt;&#x2F;code&gt;.
Here are a few that are the most popular in late 2018:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cats-effect &lt;code&gt;IO[+A]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;scalaz-zio &lt;code&gt;IO[+E, +A]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Monix &lt;code&gt;Task[+A]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From the referential transparency&#x2F;purity point of view, they behave in the same way - if we &amp;quot;suspend&amp;quot; side-effecting
operations using an operator that allows &amp;quot;delaying&amp;quot; a computation (for example, by taking a by-name parameter),
they&#x27;ll give us the properties we need. One significant difference in the above is in terms of
error handling - &lt;code&gt;zio&lt;&#x2F;code&gt; allows an &lt;code&gt;IO&lt;&#x2F;code&gt; to fail with an error value of type &lt;code&gt;E&lt;&#x2F;code&gt; that you can specify on your own,
but the other two (cats-effect IO and Monix Task) only allow failure with values that extend &lt;code&gt;Throwable&lt;&#x2F;code&gt;.
Whether one solution has significant advantages over the other is a question for a different post ;)&lt;&#x2F;p&gt;
&lt;p&gt;All things considered, all of the above types support suspending synchronous effects (like printing to standard output,
or executing a JDBC call) and asynchronous, non-blocking effects (like communicating through HTTP or
listening for messages from Kafka). The main difference between these types and &lt;code&gt;Future&lt;&#x2F;code&gt; is that they are able to
&lt;em&gt;describe a computation&lt;&#x2F;em&gt; that can be ran at some point after they&#x27;re defined, while &lt;code&gt;Future&lt;&#x2F;code&gt; is
a handle to an already running computation.&lt;&#x2F;p&gt;
&lt;p&gt;For the next part of the post, I&#x27;ll use cats-effect&#x27;s &lt;code&gt;IO&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s recreate the printing example that we were able to make referentially transparent with &lt;code&gt;Effectful&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;syntax&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;apply&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;effect&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;IO&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-block z-scala&quot;&gt;&#x2F;*
 * expands to `IO.apply(println(...))`,
 * defined as `def apply[T](f: =&amp;gt; T): IO[T]`
 * `IO.apply` is equivalent to `IO.delay`
 *&#x2F;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog1&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;tupled

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;prog2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;tupled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, running &lt;code&gt;prog1&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;prog2&lt;&#x2F;code&gt; will involve printing twice in each of them. That&#x27;s why
we say IO is referentially transparent, or pure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-word-on-determinism-and-io&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-word-on-determinism-and-io&quot; aria-label=&quot;Anchor link for: a-word-on-determinism-and-io&quot;&gt;A word on determinism and IO&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Earlier, I claimed that a function needs to return the same output for the same input. Would this be a function, then?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nextInt&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some people would argue that it&#x27;s not - because it&#x27;s not deterministic. They argue that calling &lt;code&gt;foo&lt;&#x2F;code&gt; multiple times
will give you different results. But that&#x27;s not true - just calling &lt;code&gt;foo&lt;&#x2F;code&gt; always gives you
the same action - nothing happens until you evaluate the IO. In fact, the whole function could be a constant:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nextInt&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And as a constant it must be deterministic. The fact that evaluating it multiple times will give us different
results doesn&#x27;t matter. One of the points of functions being deterministic is to allow storing them as values,
and reusing them. Take a look:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;program&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; foo&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; *&amp;gt; bar &amp;lt;* foo&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;program2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; baz &amp;lt;* foo&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because all the calls to &lt;code&gt;foo&lt;&#x2F;code&gt; are the same, we can store the result of such a call and reuse it, while maintaining
the original behavior:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;foo5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; foo&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;program&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; foo5 *&amp;gt; bar &amp;lt;* foo5

&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;program2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; baz &amp;lt;* foo5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;quot;How do we evaluate an IO?&amp;quot;, you may ask. I&#x27;ll respond, &amp;quot;with &lt;code&gt;IOApp&lt;&#x2F;code&gt;&amp;quot; (for example):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;effect&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;implicits&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;IOApp&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;foo&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;

    foo *&amp;gt; foo *&amp;gt; foo
  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;as&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;thanks-for-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#thanks-for-reading&quot; aria-label=&quot;Anchor link for: thanks-for-reading&quot;&gt;Thanks for reading&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I hope that you liked this not-so-short explanation of pure functions and that you&#x27;ll benefit from it as much as me
and other people who believe in functional programming. If you still have any questions,
feel free to reach out to me in the comments or through my Twitter&#x2F;email :)&lt;&#x2F;p&gt;
&lt;p&gt;If you think this post helped you, please share it on Twitter&#x2F;Reddit&#x2F;whatever you like. And while you&#x27;re at it,
please leave a comment ;)&lt;&#x2F;p&gt;
&lt;p&gt;If you want to keep an eye out for the next thing I write, follow me and I&#x27;ll make sure
you don&#x27;t miss anything readworthy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#links&quot; aria-label=&quot;Anchor link for: links&quot;&gt;Links&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To learn more about referential transparency, first-class effects and IO,
check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;docs&#x2F;getting-started&quot;&gt;the documentation of cats.effect.IO&lt;&#x2F;a&gt;,
or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;scala&#x2F;comments&#x2F;8ygjcq&#x2F;can_someone_explain_to_me_the_benefits_of_io&#x2F;e2jfp9b&quot;&gt;Fabio Labella&#x27;s comments in this Reddit thread&lt;&#x2F;a&gt;.
You may also want to see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=X-cEGEJMx_4&quot;&gt;Luka Jacobowitz&#x27;s talk about the other benefits of RT&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=po3wmq4S15A&quot;&gt;Rob Norris&#x27;s introduction to Effects&lt;&#x2F;a&gt;
and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;294736344&quot;&gt;Fabio&#x27;s talk about shared mutable state in pure FP&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t mind seeing a bunch of slides without an audible explanation,
you can also check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubukoz.github.io&#x2F;talks&#x2F;incremental-purity&#x2F;slides&quot;&gt;the slides for my latest talk&lt;&#x2F;a&gt;,
but sooner or later I&#x27;m planning to have it recorded and the video published.&lt;&#x2F;p&gt;
&lt;p&gt;For examples with ZIO, see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scalaz.github.io&#x2F;scalaz-zio&#x2F;usage&#x2F;purity.html&quot;&gt;ZIO&#x27;s page on purity&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also recommend following &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;blog&#x2F;&quot;&gt;the Typelevel blog&lt;&#x2F;a&gt; and
chatting to folks who love FP on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;typelevel&#x2F;cats&quot;&gt;the cats gitter&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;typelevel&#x2F;cats-effect&quot;&gt;other&lt;&#x2F;a&gt; related &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;typelevel&#x2F;general&quot;&gt;rooms&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
